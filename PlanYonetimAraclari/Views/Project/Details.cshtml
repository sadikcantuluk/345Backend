@model PlanYonetimAraclari.Models.ProjectDetailViewModel
@using PlanYonetimAraclari.Extensions
@{
    ViewData["Title"] = "Proje Detayları - " + Model.Project.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
    bool canModifyTasks = ViewBag.CanModifyTasks;
}

<!-- Üst Bilgi Alanı -->
<div class="p-6">
    <div class="mb-6 flex justify-between items-center">
        <div>
            <div class="flex items-center">
                <a href="@Url.Action("Index", "Dashboard")" class="text-gray-500 hover:text-primary-500 mr-3">
                    <i class="fas fa-arrow-left"></i>
                </a>
                <h1 class="text-2xl font-bold text-gray-900">@Model.Project.Name</h1>
                <span class="ml-3 px-3 py-1 @(Model.Project.Status == ProjectStatus.Planning ? "bg-blue-100 text-blue-800" : 
                                           Model.Project.Status == ProjectStatus.InProgress ? "bg-amber-100 text-amber-800" : 
                                           Model.Project.Status == ProjectStatus.Completed ? "bg-green-100 text-green-800" :
                                           Model.Project.Status == ProjectStatus.OnHold ? "bg-gray-100 text-gray-800" :
                                           "bg-red-100 text-red-800") text-xs rounded-full">
                    @(Model.Project.Status == ProjectStatus.Planning ? "Planlama" : 
                     Model.Project.Status == ProjectStatus.InProgress ? "Devam Ediyor" : 
                     Model.Project.Status == ProjectStatus.Completed ? "Tamamlandı" :
                     Model.Project.Status == ProjectStatus.OnHold ? "Beklemede" :
                     "İptal Edildi")
                </span>
            </div>
            <p class="text-sm text-gray-600 mt-1">Oluşturulma: @Model.Project.CreatedDate.ToString("dd MMMM yyyy")</p>
        </div>
        
        <div class="flex space-x-4">
            <a href="@Url.Action("Members", "Team", new { projectId = Model.Project.Id })" class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                <i class="fas fa-users mr-2"></i>
                Ekip Üyeleri
            </a>
            @if (Model.Project.UserId == ViewBag.CurrentUserId || (ViewBag.UserRole != null && ViewBag.UserRole == TeamMemberRole.Manager))
            {
                <a href="@Url.Action("Edit", "Project", new { id = Model.Project.Id })" class="inline-flex items-center px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 transition-colors">
                    <i class="fas fa-edit mr-2"></i>
                    Düzenle
                </a>
            }
            @if (Model.Project.UserId == ViewBag.CurrentUserId)
            {
                <button type="button" id="delete-project-btn" class="inline-flex items-center px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors">
                    <i class="fas fa-trash-alt mr-2"></i>
                    Sil
                </button>
                @Html.AntiForgeryToken()
            }
        </div>
    </div>
    
    <!-- Bildirim Mesajları -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="bg-green-50 border-l-4 border-green-500 p-4 mb-6 auto-hide-message">
            <div class="flex">
                <div class="flex-shrink-0">
                    <i class="fas fa-check-circle text-green-500"></i>
                </div>
                <div class="ml-3">
                    <p class="text-sm text-green-700">@TempData["SuccessMessage"]</p>
                </div>
            </div>
        </div>
    }
    
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-6 auto-hide-message">
            <div class="flex">
                <div class="flex-shrink-0">
                    <i class="fas fa-exclamation-circle text-red-500"></i>
                </div>
                <div class="ml-3">
                    <p class="text-sm text-red-700">@TempData["ErrorMessage"]</p>
                </div>
            </div>
        </div>
    }
    
    <!-- Proje Detayları -->
    <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-100 mb-8">
        <h2 class="text-lg font-semibold text-gray-900 mb-3">Proje Detayları</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
                <div class="mb-4">
                    <h3 class="text-sm font-medium text-gray-500">Açıklama</h3>
                    <p class="text-gray-700">@(string.IsNullOrEmpty(Model.Project.Description) ? "Açıklama yok" : Model.Project.Description)</p>
                </div>
                
                <div class="mb-4">
                    <h3 class="text-sm font-medium text-gray-500">Başlangıç Tarihi</h3>
                    <p class="text-gray-700">@Model.Project.StartDate.ToString("dd MMMM yyyy")</p>
                </div>
                
                <div>
                    <h3 class="text-sm font-medium text-gray-500">Bitiş Tarihi</h3>
                    <p class="text-gray-700">@Model.Project.EndDate.ToString("dd MMMM yyyy")</p>
                </div>
            </div>
            
            <div>
                <div class="mb-4">
                    <h3 class="text-sm font-medium text-gray-500">Son Güncelleme</h3>
                    <p class="text-gray-700">@(Model.Project.LastUpdatedDate.HasValue ? Model.Project.LastUpdatedDate.Value.ToString("dd MMMM yyyy HH:mm") : "Güncellenmemiş")</p>
                </div>
                
                <div class="mb-4">
                    <h3 class="text-sm font-medium text-gray-500">Tamamlanma Durumu</h3>
                    <div class="mt-2 flex items-center">
                        <div class="w-full bg-gray-200 rounded-full h-2 mr-2">
                            <div class="bg-primary-500 h-2 rounded-full" style="width: @Model.CompletionPercentage%"></div>
                        </div>
                        <span class="text-sm text-gray-500">%@Model.CompletionPercentage</span>
                    </div>
                </div>

                <div>
                    <h3 class="text-sm font-medium text-gray-500">Ekip Üyeleri</h3>
                    <div class="mt-2 space-y-2">
                        @if (Model.Project.TeamMembers != null && Model.Project.TeamMembers.Any())
                        {
                            foreach (var member in Model.Project.TeamMembers.Take(5))
                            {
                                <div class="flex items-center space-x-2">
                                    @if (!string.IsNullOrEmpty(member.User.ProfileImageUrl))
                                    {
                                        <img src="@member.User.ProfileImageUrl" alt="@member.User.FullName" class="w-6 h-6 rounded-full">
                                    }
                                    else
                                    {
                                        <div class="w-6 h-6 rounded-full bg-gray-300 flex items-center justify-center">
                                            <span class="text-xs text-gray-600 font-semibold">@member.User.FullName.Substring(0, 1)</span>
                                        </div>
                                    }
                                    <span class="text-sm text-gray-700">@member.User.FullName</span>
                                    <span class="text-xs text-gray-500">(@member.Role.GetDisplayName())</span>
                                </div>
                            }
                            @if (Model.Project.TeamMembers.Count > 5)
                            {
                                <div class="text-sm text-gray-500">
                                    ve @(Model.Project.TeamMembers.Count - 5) kişi daha...
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-sm text-gray-500">Henüz ekip üyesi yok</p>
                        }
                        <div class="mt-2">
                            <a href="@Url.Action("Members", "Team", new { projectId = Model.Project.Id })" class="text-sm text-primary-600 hover:text-primary-800">
                                Tüm üyeleri görüntüle
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Görevler Bölümü (Trello-like) -->
    <div class="mb-8">
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-lg font-semibold text-gray-900">Görevler</h2>
            
            <!-- Yardım butonu ve ipucu -->
            <div class="relative" id="tasks-help-container">
                <button id="tasks-help-button" class="text-gray-500 hover:text-primary-500 focus:outline-none">
                    <i class="fas fa-question-circle text-xl"></i>
                </button>
                <div id="tasks-help-content" class="absolute right-0 mt-2 w-80 bg-white rounded-md shadow-lg py-4 px-4 hidden z-10">
                    <h3 class="font-medium text-gray-800 mb-2">Görevleri Taşıma ve Düzenleme Yardımı</h3>
                    <ul class="text-sm text-gray-600 space-y-2">
                        <li class="flex items-start">
                            <i class="fas fa-arrows-alt text-primary-500 mt-1 mr-2"></i>
                            <span>Görevleri <strong>sürüklerek bırakarak</strong> farklı durumlara taşıyabilirsiniz.</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-arrow-right text-primary-500 mt-1 mr-2"></i>
                            <span>Veya görev kartlarındaki <strong>ok butonlarını</strong> kullanarak taşıyabilirsiniz.</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-trash-alt text-red-500 mt-1 mr-2"></i>
                            <span>Görev silmek için kart üzerindeki <strong>çöp kutusu</strong> simgesine tıklayın.</span>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <!-- Todo Tasks -->
            <div class="bg-white rounded-lg shadow p-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-800">Yapılacaklar</h3>
                    <span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded-full" id="todo-count">@Model.TodoTasks.Count</span>
                </div>
                <div id="todo-tasks" class="task-container space-y-3 min-h-[200px] p-2 rounded-lg border-2 border-dashed border-blue-100 border-opacity-0 transition-all hover:border-opacity-100">
                    @foreach (var task in Model.TodoTasks)
                    {
                        <div class="task-card bg-white rounded-lg border border-gray-200 p-3 shadow-sm hover:shadow-md transition-shadow duration-200 cursor-grab active:cursor-grabbing" data-task-id="@task.Id">
                            <div class="flex justify-between items-start">
                                <h4 class="font-medium text-gray-800 mb-1">@task.Name</h4>
                                @if (canModifyTasks)
                                {
                                    <div class="task-actions ml-2 flex items-center">
                                        <button class="delete-task-btn text-red-500 hover:text-red-700" data-task-id="@task.Id">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                            @if (!string.IsNullOrEmpty(task.Description))
                            {
                                <p class="text-sm text-gray-600 mb-2 break-words whitespace-normal" style="word-wrap: break-word; max-width: 100%; overflow-wrap: break-word;">@task.Description</p>
                            }
                            <div class="flex flex-col space-y-2">
                                <div class="flex items-center justify-between">
                                    <span class="text-xs @(task.Priority == TaskPriority.Low ? "bg-blue-100 text-blue-800" : 
                                                     task.Priority == TaskPriority.Medium ? "bg-amber-100 text-amber-800" : 
                                                     task.Priority == TaskPriority.High ? "bg-orange-100 text-orange-800" : 
                                                     "bg-red-100 text-red-800") px-2 py-0.5 rounded-full">
                                        @(task.Priority == TaskPriority.Low ? "Düşük" : 
                                          task.Priority == TaskPriority.Medium ? "Orta" : 
                                          task.Priority == TaskPriority.High ? "Yüksek" : 
                                          "Acil")
                                    </span>
                                    @if (task.DueDate.HasValue)
                                    {
                                        <span class="text-xs text-gray-500">
                                            <i class="far fa-calendar-alt mr-1"></i>
                                            @task.DueDate.Value.ToString("dd MMM yyyy")
                                        </span>
                                    }
                                </div>
                                @if (canModifyTasks)
                                {
                                    <div class="flex items-center justify-end space-x-1">
                                        <button class="move-task-btn bg-amber-100 text-amber-800 hover:bg-amber-200 text-xs px-2 py-1 rounded" data-task-id="@task.Id" data-status="1">
                                            <i class="fas fa-arrow-right"></i> Devam Ediyor
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    
                    @if (canModifyTasks)
                    {
                        <div class="add-task-card bg-white rounded-lg border-2 border-dashed border-gray-200 p-3 hover:border-blue-300 transition-colors duration-200 cursor-pointer">
                            <button type="button" class="w-full text-left text-gray-500 hover:text-gray-700" onclick="showAddTaskModal('@Model.Project.Id', 0)">
                                <i class="fas fa-plus mr-2"></i> Yeni Görev Ekle
                            </button>
                        </div>
                    }
                </div>
            </div>
            
            <!-- In Progress Tasks -->
            <div class="bg-white rounded-lg shadow p-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-800">Devam Edenler</h3>
                    <span class="bg-amber-100 text-amber-800 text-xs font-medium px-2.5 py-0.5 rounded-full" id="in-progress-count">@Model.InProgressTasks.Count</span>
                </div>
                <div id="in-progress-tasks" class="task-container space-y-3 min-h-[200px] p-2 rounded-lg border-2 border-dashed border-amber-100 border-opacity-0 transition-all hover:border-opacity-100">
                    @foreach (var task in Model.InProgressTasks)
                    {
                        <div class="task-card bg-white rounded-lg border border-gray-200 p-3 shadow-sm hover:shadow-md transition-shadow duration-200 cursor-grab active:cursor-grabbing" data-task-id="@task.Id">
                            <div class="flex justify-between items-start">
                                <h4 class="font-medium text-gray-800 mb-1">@task.Name</h4>
                                @if (canModifyTasks)
                                {
                                    <div class="task-actions ml-2 flex items-center">
                                        <button class="delete-task-btn text-red-500 hover:text-red-700" data-task-id="@task.Id">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                            @if (!string.IsNullOrEmpty(task.Description))
                            {
                                <p class="text-sm text-gray-600 mb-2 break-words whitespace-normal" style="word-wrap: break-word; max-width: 100%; overflow-wrap: break-word;">@task.Description</p>
                            }
                            <div class="flex flex-col space-y-2">
                                <div class="flex items-center justify-between">
                                    <span class="text-xs @(task.Priority == TaskPriority.Low ? "bg-blue-100 text-blue-800" : 
                                                     task.Priority == TaskPriority.Medium ? "bg-amber-100 text-amber-800" : 
                                                     task.Priority == TaskPriority.High ? "bg-orange-100 text-orange-800" : 
                                                     "bg-red-100 text-red-800") px-2 py-0.5 rounded-full">
                                        @(task.Priority == TaskPriority.Low ? "Düşük" : 
                                          task.Priority == TaskPriority.Medium ? "Orta" : 
                                          task.Priority == TaskPriority.High ? "Yüksek" : 
                                          "Acil")
                                    </span>
                                    @if (task.DueDate.HasValue)
                                    {
                                        <span class="text-xs text-gray-500">
                                            <i class="far fa-calendar-alt mr-1"></i>
                                            @task.DueDate.Value.ToString("dd MMM yyyy")
                                        </span>
                                    }
                                </div>
                                @if (canModifyTasks)
                                {
                                    <div class="flex justify-between items-center mt-2">
                                        <button class="move-task-btn bg-blue-100 text-blue-800 hover:bg-blue-200 text-xs px-2 py-1 rounded" data-task-id="@task.Id" data-status="0">
                                            <i class="fas fa-arrow-left"></i> Yapılacak
                                        </button>
                                        <button class="move-task-btn bg-green-100 text-green-800 hover:bg-green-200 text-xs px-2 py-1 rounded" data-task-id="@task.Id" data-status="2">
                                            <i class="fas fa-arrow-right"></i> Tamamlandı
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    
                    @if (canModifyTasks)
                    {
                        <div class="add-task-card bg-white rounded-lg border-2 border-dashed border-gray-200 p-3 hover:border-amber-300 transition-colors duration-200 cursor-pointer">
                            <button type="button" class="w-full text-left text-gray-500 hover:text-gray-700" onclick="showAddTaskModal('@Model.Project.Id', 1)">
                                <i class="fas fa-plus mr-2"></i> Yeni Görev Ekle
                            </button>
                        </div>
                    }
                </div>
            </div>
            
            <!-- Done Tasks -->
            <div class="bg-white rounded-lg shadow p-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-800">Tamamlananlar</h3>
                    <span class="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full" id="done-count">@Model.DoneTasks.Count</span>
                </div>
                <div id="done-tasks" class="task-container space-y-3 min-h-[200px] p-2 rounded-lg border-2 border-dashed border-green-100 border-opacity-0 transition-all hover:border-opacity-100">
                    @foreach (var task in Model.DoneTasks)
                    {
                        <div class="task-card bg-white rounded-lg border border-gray-200 p-3 shadow-sm hover:shadow-md transition-shadow duration-200 cursor-grab active:cursor-grabbing" data-task-id="@task.Id">
                            <div class="flex justify-between items-start">
                                <h4 class="font-medium text-gray-800 mb-1">@task.Name</h4>
                                @if (canModifyTasks)
                                {
                                    <div class="task-actions ml-2 flex items-center">
                                        <button class="delete-task-btn text-red-500 hover:text-red-700" data-task-id="@task.Id">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                            @if (!string.IsNullOrEmpty(task.Description))
                            {
                                <p class="text-sm text-gray-600 mb-2 break-words whitespace-normal" style="word-wrap: break-word; max-width: 100%; overflow-wrap: break-word;">@task.Description</p>
                            }
                            <div class="flex flex-col space-y-2">
                                <div class="flex items-center justify-between">
                                    <span class="text-xs @(task.Priority == TaskPriority.Low ? "bg-blue-100 text-blue-800" : 
                                                     task.Priority == TaskPriority.Medium ? "bg-amber-100 text-amber-800" : 
                                                     task.Priority == TaskPriority.High ? "bg-orange-100 text-orange-800" : 
                                                     "bg-red-100 text-red-800") px-2 py-0.5 rounded-full">
                                        @(task.Priority == TaskPriority.Low ? "Düşük" : 
                                          task.Priority == TaskPriority.Medium ? "Orta" : 
                                          task.Priority == TaskPriority.High ? "Yüksek" : 
                                          "Acil")
                                    </span>
                                    @if (task.DueDate.HasValue)
                                    {
                                        <span class="text-xs text-gray-500">
                                            <i class="far fa-calendar-alt mr-1"></i>
                                            @task.DueDate.Value.ToString("dd MMM yyyy")
                                        </span>
                                    }
                                </div>
                                @if (canModifyTasks)
                                {
                                    <div class="flex justify-end items-center mt-2">
                                        <button class="move-task-btn bg-amber-100 text-amber-800 hover:bg-amber-200 text-xs px-2 py-1 rounded" data-task-id="@task.Id" data-status="1">
                                            <i class="fas fa-arrow-left"></i> Devam Ediyor
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    
                    @if (canModifyTasks)
                    {
                        <div class="add-task-card bg-white rounded-lg border-2 border-dashed border-gray-200 p-3 hover:border-green-300 transition-colors duration-200 cursor-pointer">
                            <button type="button" class="w-full text-left text-gray-500 hover:text-gray-700" onclick="showAddTaskModal('@Model.Project.Id', 2)">
                                <i class="fas fa-plus mr-2"></i> Yeni Görev Ekle
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Görev Ekleme Modalı -->
<div id="add-task-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-6 border w-[500px] shadow-lg rounded-lg bg-white">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-xl font-semibold text-gray-900">Yeni Görev Ekle</h3>
            <button type="button" onclick="closeAddTaskModal()" class="text-gray-400 hover:text-gray-500">
                <i class="fas fa-times"></i>
            </button>
        </div>
        
        <form asp-action="CreateTask" asp-controller="Project" method="post" class="space-y-4">
            <input type="hidden" id="task-project-id" name="ProjectId" />
            <input type="hidden" id="task-status" name="Status" />
            
            <div>
                <label for="task-name" class="block text-sm font-medium text-gray-700 mb-1">Görev Adı</label>
                <input type="text" id="task-name" name="Name" required
                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 text-gray-900"
                       placeholder="Görev adını girin">
            </div>
            
            <div>
                <label for="task-description" class="block text-sm font-medium text-gray-700 mb-1">Açıklama</label>
                <textarea id="task-description" name="Description" rows="3"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 text-gray-900"
                        placeholder="Görev açıklamasını girin"></textarea>
            </div>
            
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label for="task-priority" class="block text-sm font-medium text-gray-700 mb-1">Öncelik</label>
                    <select id="task-priority" name="Priority"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 text-gray-900">
                        <option value="0">Düşük</option>
                        <option value="1">Orta</option>
                        <option value="2">Yüksek</option>
                        <option value="3">Acil</option>
                    </select>
                </div>
                
                <div>
                    <label for="task-due-date" class="block text-sm font-medium text-gray-700 mb-1">Bitiş Tarihi</label>
                    <input type="date" id="task-due-date" name="DueDate"
                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 text-gray-900">
                </div>
            </div>
            
            <div class="flex justify-end space-x-3 pt-4">
                <button type="button" onclick="closeAddTaskModal()"
                        class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                    İptal
                </button>
                <button type="submit"
                        class="px-4 py-2 text-sm font-medium text-white bg-primary-600 border border-transparent rounded-md shadow-sm hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                    Ekle
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Görev Silme Modalı -->
<div id="delete-task-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <h3 class="text-lg font-medium leading-6 text-gray-900 mb-4">Görevi Sil</h3>
            <p class="text-sm text-gray-500 mb-4">Bu görevi silmek istediğinize emin misiniz?</p>
            <input type="hidden" id="delete-task-id" name="taskId" />
            <div class="flex justify-end space-x-3">
                <button type="button" id="cancel-delete-task" onclick="closeDeleteTaskModal()"
                        class="px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200">
                    İptal
                </button>
                <button type="button" id="confirm-delete-task"
                        class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700">
                    Sil
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Proje Silme Modal -->
<div id="delete-project-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-md transform transition-all scale-95 opacity-0" id="delete-modal-content">
        <div class="flex items-center justify-between mb-4">
            <h3 class="text-xl font-semibold text-red-600">Projeyi Sil</h3>
            <button id="close-delete-modal" class="text-gray-400 hover:text-gray-500 focus:outline-none">
                <i class="fas fa-times"></i>
            </button>
        </div>
        
        <div class="mb-6">
            <p class="text-gray-700 mb-4">Bu işlem projeyi ve tüm görevlerini <span class="font-bold">kalıcı olarak</span> silecektir. Bu işlem geri alınamaz.</p>
            
            <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-4">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <i class="fas fa-exclamation-triangle text-red-500"></i>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm text-red-700">Projeyi silmek istediğinizden emin misiniz?</p>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="flex justify-end space-x-3">
            <button type="button" id="cancel-delete" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50 transition-colors focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-offset-1">
                İptal
            </button>
            <button type="button" id="confirm-delete" class="px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-1">
                Projeyi Sil
            </button>
        </div>
    </div>
</div>

@section Scripts {
    <!-- SortableJS kütüphanesi -->
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    
    <script>
        // Yeni görev ekleme modalını göster
        function showAddTaskModal(projectId, status) {
            // Form alanlarını sıfırla
            document.getElementById('task-name').value = '';
            document.getElementById('task-description').value = '';
            document.getElementById('task-priority').value = '0';
            document.getElementById('task-due-date').value = '';
            document.getElementById('task-project-id').value = projectId;
            document.getElementById('task-status').value = status;

            // Modalı göster
            document.getElementById('add-task-modal').classList.remove('hidden');
            document.body.style.overflow = 'hidden';
        }

        // Modalı kapat
        function closeAddTaskModal() {
            document.getElementById('add-task-modal').classList.add('hidden');
            document.body.style.overflow = 'auto';
        }

        // Görev silme modalını göster
        function showDeleteTaskModal(taskId) {
            document.getElementById('delete-task-id').value = taskId;
            document.getElementById('delete-task-modal').classList.remove('hidden');
            document.body.style.overflow = 'hidden';
        }

        // Görev silme modalını kapat
        function closeDeleteTaskModal() {
            document.getElementById('delete-task-modal').classList.add('hidden');
            document.body.style.overflow = 'auto';
        }

        $(document).ready(function() {
            // Sürükle-bırak işlevini etkinleştir
            const todoList = document.getElementById('todo-tasks');
            const inProgressList = document.getElementById('in-progress-tasks');
            const doneList = document.getElementById('done-tasks');
            
            // Todo listesi için Sortable başlat
            new Sortable(todoList, {
                group: 'tasks', // Gruplar arası taşıma için
                animation: 150,
                ghostClass: 'bg-blue-50',
                dragClass: 'opacity-75',
                chosenClass: 'shadow-lg',
                onStart: function() {
                    $('.task-container').addClass('border-opacity-100');
                },
                onEnd: function(evt) {
                    $('.task-container').removeClass('border-opacity-100');
                    
                    if (evt.from !== evt.to) {
                        const taskId = evt.item.getAttribute('data-task-id');
                        let newStatus = 0; // Varsayılan Todo
                        
                        if (evt.to.id === 'in-progress-tasks') {
                            newStatus = 1; // In Progress
                        } else if (evt.to.id === 'done-tasks') {
                            newStatus = 2; // Done
                        }
                        
                        // AJAX ile görev durumunu güncelle ve öncelik bilgisini callback ile güncelleyecek şekilde ayarla
                        $.ajax({
                            url: "@Url.Action("UpdateTaskStatus", "Project")",
                            type: "POST",
                            data: {
                                taskId: taskId,
                                newStatus: newStatus
                            },
                            success: function(response) {
                                if (response.success) {
                                    // Butonları güncelle
                                    updateTaskButtons(evt.item, newStatus);
                                    
                                    // Eğer sunucudan yanıtta görev bilgisi varsa öncelik etiketini ve vade tarihini güncelle
                                    if (response.task) {
                                        if (response.task.priority !== undefined) {
                                            updateTaskPriority(evt.item, response.task.priority);
                                        }
                                        updateTaskDueDate(evt.item, response.task.dueDate);
                                    }
                                    
                                    // Sayaçları güncelle
                                    updateTaskCounters();
                                    // Tamamlanma yüzdesini güncelle
                                    updateCompletionPercentage();
                                } else {
                                    // Hata durumunda sayfayı yenile
                                    window.location.reload();
                                }
                            },
                            error: function() {
                                window.location.reload();
                            }
                        });
                    }
                }
            });
            
            // In Progress listesi için Sortable başlat
            new Sortable(inProgressList, {
                group: 'tasks',
                animation: 150,
                ghostClass: 'bg-amber-50',
                dragClass: 'opacity-75',
                chosenClass: 'shadow-lg',
                onStart: function() {
                    $('.task-container').addClass('border-opacity-100');
                },
                onEnd: function(evt) {
                    $('.task-container').removeClass('border-opacity-100');
                    
                    if (evt.from !== evt.to) {
                        const taskId = evt.item.getAttribute('data-task-id');
                        let newStatus = 1; // Varsayılan In Progress
                        
                        if (evt.to.id === 'todo-tasks') {
                            newStatus = 0; // Todo
                        } else if (evt.to.id === 'done-tasks') {
                            newStatus = 2; // Done
                        }
                        
                        // AJAX ile görev durumunu güncelle ve öncelik bilgisini callback ile güncelleyecek şekilde ayarla
                        $.ajax({
                            url: "@Url.Action("UpdateTaskStatus", "Project")",
                            type: "POST",
                            data: {
                                taskId: taskId,
                                newStatus: newStatus
                            },
                            success: function(response) {
                                if (response.success) {
                                    // Butonları güncelle
                                    updateTaskButtons(evt.item, newStatus);
                                    
                                    // Eğer sunucudan yanıtta görev bilgisi varsa öncelik etiketini ve vade tarihini güncelle
                                    if (response.task) {
                                        if (response.task.priority !== undefined) {
                                            updateTaskPriority(evt.item, response.task.priority);
                                        }
                                        updateTaskDueDate(evt.item, response.task.dueDate);
                                    }
                                    
                                    // Sayaçları güncelle
                                    updateTaskCounters();
                                    // Tamamlanma yüzdesini güncelle
                                    updateCompletionPercentage();
                                } else {
                                    // Hata durumunda sayfayı yenile
                                    window.location.reload();
                                }
                            },
                            error: function() {
                                window.location.reload();
                            }
                        });
                    }
                }
            });
            
            // Done listesi için Sortable başlat
            new Sortable(doneList, {
                group: 'tasks',
                animation: 150,
                ghostClass: 'bg-green-50',
                dragClass: 'opacity-75',
                chosenClass: 'shadow-lg',
                onStart: function() {
                    $('.task-container').addClass('border-opacity-100');
                },
                onEnd: function(evt) {
                    $('.task-container').removeClass('border-opacity-100');
                    
                    if (evt.from !== evt.to) {
                        const taskId = evt.item.getAttribute('data-task-id');
                        let newStatus = 2; // Varsayılan Done
                        
                        if (evt.to.id === 'todo-tasks') {
                            newStatus = 0; // Todo
                        } else if (evt.to.id === 'in-progress-tasks') {
                            newStatus = 1; // In Progress
                        }
                        
                        // AJAX ile görev durumunu güncelle ve öncelik bilgisini callback ile güncelleyecek şekilde ayarla
                        $.ajax({
                            url: "@Url.Action("UpdateTaskStatus", "Project")",
                            type: "POST",
                            data: {
                                taskId: taskId,
                                newStatus: newStatus
                            },
                            success: function(response) {
                                if (response.success) {
                                    // Butonları güncelle
                                    updateTaskButtons(evt.item, newStatus);
                                    
                                    // Eğer sunucudan yanıtta görev bilgisi varsa öncelik etiketini ve vade tarihini güncelle
                                    if (response.task) {
                                        if (response.task.priority !== undefined) {
                                            updateTaskPriority(evt.item, response.task.priority);
                                        }
                                        updateTaskDueDate(evt.item, response.task.dueDate);
                                    }
                                    
                                    // Sayaçları güncelle
                                    updateTaskCounters();
                                    // Tamamlanma yüzdesini güncelle
                                    updateCompletionPercentage();
                                } else {
                                    // Hata durumunda sayfayı yenile
                                    window.location.reload();
                                }
                            },
                            error: function() {
                                window.location.reload();
                            }
                        });
                    }
                }
            });
            
            // Tamamlanma yüzdesini güncelleme fonksiyonu
            function updateCompletionPercentage() {
                // Görev sayılarını al
                const todoCount = $('#todo-tasks .task-card').length;
                const inProgressCount = $('#in-progress-tasks .task-card').length;
                const doneCount = $('#done-tasks .task-card').length;
                
                // Toplam görev sayısı
                const totalTasks = todoCount + inProgressCount + doneCount;
                
                // Eğer hiç görev yoksa, yüzde 0 olarak ayarla
                if (totalTasks === 0) {
                    setCompletionBar(0);
                    return;
                }
                
                // Tamamlanma yüzdesini hesapla (sadece Done durumundaki görevler tamamlanmış sayılır)
                const completionPercentage = Math.round((doneCount / totalTasks) * 100);
                
                // İlerleme çubuğunu güncelle
                setCompletionBar(completionPercentage);
            }
            
            // İlerleme çubuğunu ayarlama fonksiyonu
            function setCompletionBar(percentage) {
                // İlerleme çubuğu elementini seç
                const progressBar = $('.bg-primary-500.h-2.rounded-full');
                const percentageText = progressBar.parent().next('.text-sm.text-gray-500');
                
                // Genişliği güncelle
                progressBar.css('width', percentage + '%');
                
                // Yüzde metnini güncelle
                percentageText.text('%' + percentage);
            }

            // Görev butonlarını güncelleme fonksiyonu
            function updateTaskButtons(taskElement, newStatus) {
                // Mevcut buton konteynerini temizle
                const buttonContainer = $(taskElement).find('.flex.items-center.space-x-1');
                buttonContainer.empty();
                
                // Yeni duruma göre doğru butonları ekle
                if (newStatus === 0) { // Yapılacak
                    buttonContainer.append(`
                        <button class="move-task-btn bg-amber-100 text-amber-800 hover:bg-amber-200 text-xs px-2 py-1 rounded" data-task-id="${$(taskElement).data('task-id')}" data-status="1">
                            <i class="fas fa-arrow-right"></i> Devam Ediyor
                        </button>
                    `);
                } else if (newStatus === 1) { // Devam Ediyor
                    buttonContainer.append(`
                        <button class="move-task-btn bg-blue-100 text-blue-800 hover:bg-blue-200 text-xs px-2 py-1 rounded" data-task-id="${$(taskElement).data('task-id')}" data-status="0">
                            <i class="fas fa-arrow-left"></i> Yapılacak
                        </button>
                        <button class="move-task-btn bg-green-100 text-green-800 hover:bg-green-200 text-xs px-2 py-1 rounded" data-task-id="${$(taskElement).data('task-id')}" data-status="2">
                            <i class="fas fa-arrow-right"></i> Tamamlandı
                        </button>
                    `);
                } else { // Tamamlandı
                    buttonContainer.append(`
                        <button class="move-task-btn bg-amber-100 text-amber-800 hover:bg-amber-200 text-xs px-2 py-1 rounded" data-task-id="${$(taskElement).data('task-id')}" data-status="1">
                            <i class="fas fa-arrow-left"></i> Devam Ediyor
                        </button>
                    `);
                }
                
                // Butonlara olay dinleyicisi ekle
                $(taskElement).find('.move-task-btn').on('click', handleMoveTaskClick);
            }
            
            // Görev sayaçlarını güncelleme fonksiyonu
            function updateTaskCounters() {
                // Her bir durum için görev sayısını güncelle
                const todoCount = $('#todo-tasks .task-card').length;
                const inProgressCount = $('#in-progress-tasks .task-card').length;
                const doneCount = $('#done-tasks .task-card').length;
                
                // Sayaçları güncelle - daha spesifik seçiciler kullanıyoruz
                // Başlıktaki sayaç etiketlerini (span) hedefliyoruz, görev kartlarındaki öncelik etiketlerini değil
                $('#todo-tasks').closest('.bg-white').find('h3 + .bg-blue-100.text-blue-800.rounded-full').text(todoCount);
                $('#in-progress-tasks').closest('.bg-white').find('h3 + .bg-amber-100.text-amber-800.rounded-full').text(inProgressCount);
                $('#done-tasks').closest('.bg-white').find('h3 + .bg-green-100.text-green-800.rounded-full').text(doneCount);
            }
            
            // Bildirim gösterme fonksiyonu
            function showNotification(message, type) {
                const notificationDiv = $('<div>').addClass('fixed bottom-4 right-4 px-6 py-3 rounded-lg shadow-lg z-50')
                    .css('transition', 'all 0.5s ease')
                    .css('opacity', '0')
                    .text(message);
                
                if (type === 'success') {
                    notificationDiv.addClass('bg-green-500 text-white');
                } else {
                    notificationDiv.addClass('bg-red-500 text-white');
                }
                
                $('body').append(notificationDiv);
                
                // Animasyon ile göster
                setTimeout(() => {
                    notificationDiv.css('opacity', '1');
                }, 10);
                
                // 3 saniye sonra kaldır
                setTimeout(() => {
                    notificationDiv.css('opacity', '0');
                    setTimeout(() => {
                        notificationDiv.remove();
                    }, 500);
                }, 3000);
            }
            
            // Öncelik değerini metne dönüştüren fonksiyon
            function getPriorityText(priority) {
                switch(parseInt(priority)) {
                    case 0: return "Düşük";
                    case 1: return "Orta";
                    case 2: return "Yüksek";
                    case 3: return "Acil";
                    default: return "Orta";
                }
            }

            // Öncelik değerine göre stil sınıflarını döndüren fonksiyon
            function getPriorityClasses(priority) {
                switch(parseInt(priority)) {
                    case 0: return "bg-blue-100 text-blue-800";
                    case 1: return "bg-amber-100 text-amber-800";
                    case 2: return "bg-orange-100 text-orange-800";
                    case 3: return "bg-red-100 text-red-800";
                    default: return "bg-amber-100 text-amber-800";
                }
            }

            // Öncelik etiketini güncelleme fonksiyonu
            function updateTaskPriority(taskElement, priority) {
                // Daha spesifik bir seçici kullanarak öncelik etiketini doğru bir şekilde seçiyoruz
                // .task-card içindeki ilk .flex.items-center içindeki span'i hedefliyoruz
                // Böylece başlık alanındaki sayaç ile karışmıyor
                const prioritySpan = $(taskElement).find('.flex.items-center:first span.text-xs').first();
                if (prioritySpan.length) {
                    // Tüm mevcut arka plan ve metin renk sınıflarını kaldır
                    prioritySpan.removeClass('bg-blue-100 text-blue-800 bg-amber-100 text-amber-800 bg-orange-100 text-orange-800 bg-red-100 text-red-800');
                    
                    // Yeni önceliğe göre sınıfları ekle
                    prioritySpan.addClass(getPriorityClasses(priority));
                    
                    // Metni güncelle
                    prioritySpan.text(getPriorityText(priority));
                }
            }

            // Görev taşıma butonları için tıklama olay işleyicisi
            function handleMoveTaskClick() {
                const taskId = $(this).data("task-id");
                const newStatus = $(this).data("status");
                const taskCard = $(this).closest('.task-card');
                
                // AJAX ile görev durumunu güncelle
                $.ajax({
                    url: "@Url.Action("UpdateTaskStatus", "Project")",
                    type: "POST",
                    data: {
                        taskId: taskId,
                        newStatus: newStatus
                    },
                    success: function(response) {
                        if (response.success) {
                            // Başarılı olduğuna dair bildirim göster
                            showNotification('Görev durumu güncellendi', 'success');
                            
                            // Görevi mevcut konteynırından kaldır
                            $(taskCard).fadeOut(300, function() {
                                $(this).remove();
                                
                                // Sayaçları güncelle
                                updateTaskCounters();
                                // Tamamlanma yüzdesini güncelle
                                updateCompletionPercentage();
                            });
                        } else {
                            // Hata mesajı göster
                            showNotification('Hata: ' + response.message, 'error');
                            // Sayfayı yenile (durumu eski haline döndürmek için)
                            window.location.reload();
                        }
                    },
                    error: function(xhr, status, error) {
                        showNotification('Bağlantı hatası oluştu. Lütfen tekrar deneyin.', 'error');
                        console.error("AJAX Error: ", status, error);
                    }
                });
            }
            
            // Görev silme
            $(".delete-task-btn").on("click", function() {
                const taskId = $(this).data("task-id");
                $("#delete-task-id").val(taskId);
                $("#delete-task-modal").removeClass("hidden");
                $("body").css("overflow", "hidden");
            });
            
            // Görev silme modalı kapatma
            $("#close-delete-task-modal, #cancel-delete-task").on("click", function() {
                $("#delete-task-modal").addClass("hidden");
                $("body").css("overflow", "");
            });
            
            // Görev silme işlemi
            $("#confirm-delete-task").on("click", function() {
                const taskId = $("#delete-task-id").val();
                
                $.ajax({
                    url: "@Url.Action("DeleteTask", "Project")",
                    type: "POST",
                    data: {
                        taskId: taskId
                    },
                    success: function(response) {
                        if (response.success) {
                            // Modal kapat
                            $("#delete-task-modal").addClass("hidden");
                            $("body").css("overflow", "auto");
                            
                            // Görevi DOM'dan kaldır
                            $(`.task-card[data-task-id="${taskId}"]`).fadeOut(300, function() {
                                $(this).remove();
                                
                                // Sayaçları güncelle
                                updateTaskCounters();
                                // Tamamlanma yüzdesini güncelle
                                updateCompletionPercentage();
                                
                                // Başarı mesajı göster
                                showNotification("Görev başarıyla silindi", "success");
                            });
                        } else {
                            // Hata mesajı göster
                            $("#delete-task-modal").addClass("hidden");
                            $("body").css("overflow", "auto");
                            showNotification("Hata: " + response.message, "error");
                        }
                    },
                    error: function(xhr, status, error) {
                        $("#delete-task-modal").addClass("hidden");
                        $("body").css("overflow", "auto");
                        showNotification("Bağlantı hatası oluştu. Lütfen tekrar deneyin.", "error");
                    }
                });
            });
            
            // Görev ekleme modalı
            $("#add-todo-task").on("click", function() {
                $("#Status").val("0"); // Todo
                $("#add-task-modal").removeClass("hidden");
                $("body").css("overflow", "hidden"); // Arka planı kaydırmayı engelle
            });
            
            // Devam Eden görev ekleme
            $("#add-inprogress-task").on("click", function() {
                $("#Status").val("1"); // In Progress
                $("#add-task-modal").removeClass("hidden");
                $("body").css("overflow", "hidden");
            });
            
            // Tamamlanmış görev ekleme
            $("#add-done-task").on("click", function() {
                $("#Status").val("2"); // Done
                $("#add-task-modal").removeClass("hidden");
                $("body").css("overflow", "hidden");
            });
            
            // Modal kapatma
            $("#close-task-modal, #cancel-task").on("click", function() {
                $("#add-task-modal").addClass("hidden");
                $("body").css("overflow", ""); // Kaydırmayı tekrar etkinleştir
                $("#create-task-form")[0].reset();
                $("#Status").val("0"); // Reset status to default
            });
            
            // ESC tuşu ile kapatma
            $(document).on("keydown", function(e) {
                if (e.key === "Escape") {
                    $("#add-task-modal").addClass("hidden");
                    $("#delete-project-modal").addClass("hidden");
                    $("#tasks-help-content").addClass("hidden");
                    $("#delete-task-modal").addClass("hidden");
                    $("body").css("overflow", "");
                }
            });
            
            // Görev yardım paneli gösterme/gizleme
            $("#tasks-help-button").on("click", function() {
                $("#tasks-help-content").toggleClass("hidden");
            });
            
            // Görev yardım dışına tıklandığında gizle
            $(document).on("click", function(e) {
                if (!$(e.target).closest("#tasks-help-container").length) {
                    $("#tasks-help-content").addClass("hidden");
                }
            });
            
            // Görev formunu doğrulama
            $("#create-task-form").on("submit", function(e) {
                const taskName = $("#Name").val();
                
                if (!taskName || taskName.trim() === "") {
                    e.preventDefault();
                    $("#task-validation-error").removeClass("hidden");
                    $("#task-validation-error-message").text("Görev adı zorunludur");
                    return false;
                }
                
                $("#task-validation-error").addClass("hidden");
                return true;
            });
            
            // Proje silme modalı
            $("#delete-project-btn").on("click", function() {
                $("#delete-project-modal").removeClass("hidden");
                setTimeout(function() {
                    $("#delete-modal-content").removeClass("scale-95 opacity-0").addClass("scale-100 opacity-100");
                }, 10);
                document.body.style.overflow = 'hidden';
            });
            
            // Proje silme modalı kapatma
            $("#close-delete-modal, #cancel-delete").on("click", function() {
                $("#delete-modal-content").removeClass("scale-100 opacity-100").addClass("scale-95 opacity-0");
                setTimeout(function() {
                    $("#delete-project-modal").addClass("hidden");
                    document.body.style.overflow = 'auto';
                }, 200);
            });
            
            // Proje silme
            $("#confirm-delete").on("click", function() {
                // Silme işlemi başladığında butonları devre dışı bırakalım
                $("#confirm-delete").prop('disabled', true).html('<i class="fas fa-spinner fa-spin mr-2"></i> Siliniyor...');
                $("#cancel-delete").prop('disabled', true);
                
                $.ajax({
                    url: "@Url.Action("Delete", "Project")",
                    type: "POST",
                    data: {
                        id: @Model.Project.Id,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        // Başarılı silme, dashboard'a yönlendir
                        showNotification("Proje başarıyla silindi", "success");
                        setTimeout(function() {
                            window.location.href = "@Url.Action("Index", "Dashboard")";
                        }, 1000);
                    },
                    error: function(xhr, status, error) {
                        // Silme başarısız olsa bile sayfayı yenilediğimizde project silinmiş olabilir
                        console.error("AJAX Error:", status, error);
                        console.log("Response:", xhr.responseText);
                        
                        // HTTP durum kodunu kontrol et - 302 Found veya diğer yönlendirme kodları silme işleminin
                        // başarılı olduğunu gösterebilir
                        if (xhr.status === 302 || xhr.status === 200) {
                            showNotification("Proje işlemi tamamlandı, yönlendiriliyorsunuz...", "success");
                            setTimeout(function() {
                                window.location.href = "@Url.Action("Index", "Dashboard")";
                            }, 1000);
                        } else {
                            $("#delete-project-modal").addClass("hidden");
                            document.body.style.overflow = 'auto';
                            showNotification("Bağlantı hatası oluştu. Lütfen tekrar deneyin.", "error");
                            // Butonları tekrar aktifleştir
                            $("#confirm-delete").prop('disabled', false).html('Projeyi Sil');
                            $("#cancel-delete").prop('disabled', false);
                        }
                    }
                });
            });
            
            // ESC tuşuyla modal kapatma
            $(document).keydown(function(e) {
                if (e.key === "Escape") {
                    if (!$("#delete-project-modal").hasClass("hidden")) {
                        $("#delete-modal-content").removeClass("scale-100 opacity-100").addClass("scale-95 opacity-0");
                        setTimeout(function() {
                            $("#delete-project-modal").addClass("hidden");
                            document.body.style.overflow = 'auto';
                        }, 200);
                    }
                }
            });
            
            // Görev tarihini güncelleme fonksiyonu
            function updateTaskDueDate(taskElement, dueDate) {
                const dueDateContainer = $(taskElement).find('.flex.items-center.justify-between');
                let dueDateSpan = dueDateContainer.find('span.text-xs.text-gray-500');
                
                if (dueDate) {
                    // Format date as dd MMM yyyy
                    const date = new Date(dueDate);
                    const formattedDate = date.getDate().toString().padStart(2, '0') + " " + 
                        date.toLocaleString('tr-TR', { month: 'short' }) + " " + 
                        date.getFullYear();
                    
                    if (dueDateSpan.length) {
                        // Update existing due date span
                        dueDateSpan.html('<i class="far fa-calendar-alt mr-1"></i>' + formattedDate);
                    } else {
                        // Create new due date span
                        dueDateContainer.append(
                            '<span class="text-xs text-gray-500"><i class="far fa-calendar-alt mr-1"></i>' + formattedDate + '</span>'
                        );
                    }
                } else {
                    // Remove due date span if it exists
                    dueDateSpan.remove();
                }
            }
            
            // Durum dropdown açma/kapama
            $("#status-dropdown-button").on("click", function() {
                $("#status-dropdown").toggleClass("hidden");
            });
            
            // Dropdown dışına tıklandığında kapatma
            $(document).on("click", function(e) {
                if (!$(e.target).closest("#status-dropdown-container").length) {
                    $("#status-dropdown").addClass("hidden");
                }
            });
            
            // Durum değiştirme
            $(".status-option").on("click", function(e) {
                e.preventDefault();
                const statusId = $(this).data("status");
                
                $.ajax({
                    url: "@Url.Action("UpdateStatus", "Project")",
                    type: "POST",
                    data: {
                        id: @Model.Project.Id,
                        status: statusId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            // Sayfayı yenile
                            window.location.reload();
                        } else {
                            showNotification("Hata: " + response.message, "error");
                        }
                    },
                    error: function() {
                        showNotification("Bağlantı hatası oluştu. Lütfen tekrar deneyin.", "error");
                    }
                });
            });
        });

        // Otomatik gizlenen mesajlar için JavaScript
        document.addEventListener('DOMContentLoaded', function () {
            setTimeout(function () {
                var messages = document.querySelectorAll('.auto-hide-message');
                messages.forEach(function (message) {
                    message.style.display = 'none';
                });
            }, 5000);
        });
    </script>
} 