@model PlanYonetimAraclari.Models.ProjectDetailViewModel
@using PlanYonetimAraclari.Extensions
@{
    ViewData["Title"] = "Proje Detayları - " + Model.Project.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
    bool canModifyTasks = ViewBag.CanModifyTasks;
}

<!-- Üst Bilgi Alanı -->
<div class="p-6">
    <div class="mb-6 flex flex-wrap justify-between items-center gap-4">
        <div class="flex-1 min-w-0">
            <div class="flex items-center flex-wrap gap-2">
                <a href="@Url.Action("Index", "Dashboard")" class="text-gray-500 hover:text-primary-500 flex-shrink-0">
                    <i class="fas fa-arrow-left"></i>
                </a>
                <h1 class="text-2xl font-bold text-gray-900 truncate">@Model.Project.Name</h1>
                <span class="inline-flex px-3 py-1 @(Model.Project.Status == ProjectStatus.Planning ? "bg-blue-100 text-blue-800" : 
                                           Model.Project.Status == ProjectStatus.InProgress ? "bg-amber-100 text-amber-800" : 
                                           Model.Project.Status == ProjectStatus.Completed ? "bg-green-100 text-green-800" :
                                           Model.Project.Status == ProjectStatus.OnHold ? "bg-gray-100 text-gray-800" :
                                           "bg-red-100 text-red-800") text-xs rounded-full flex-shrink-0">
                    @(Model.Project.Status == ProjectStatus.Planning ? "Planlama" : 
                     Model.Project.Status == ProjectStatus.InProgress ? "Devam Ediyor" : 
                     Model.Project.Status == ProjectStatus.Completed ? "Tamamlandı" :
                     Model.Project.Status == ProjectStatus.OnHold ? "Beklemede" :
                     "İptal Edildi")
                </span>
            </div>
            <p class="text-sm text-gray-600 mt-1">Oluşturulma: @Model.Project.CreatedDate.ToString("dd MMMM yyyy")</p>
        </div>
        
        <div class="flex flex-wrap gap-2">
            <a href="@Url.Action("Members", "Team", new { projectId = Model.Project.Id })" class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors whitespace-nowrap">
                <i class="fas fa-users mr-2"></i>
                Ekip Üyeleri
            </a>
            @if (Model.Project.UserId == ViewBag.CurrentUserId || (ViewBag.UserRole != null && ViewBag.UserRole == TeamMemberRole.Manager))
            {
                <a href="@Url.Action("Edit", "Project", new { id = Model.Project.Id })" class="inline-flex items-center px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 transition-colors whitespace-nowrap">
                    <i class="fas fa-edit mr-2"></i>
                    Düzenle
                </a>
            }
            @if (Model.Project.UserId == ViewBag.CurrentUserId)
            {
                <button type="button" id="delete-project-btn" class="inline-flex items-center px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors whitespace-nowrap">
                    <i class="fas fa-trash-alt mr-2"></i>
                    Sil
                </button>
                @Html.AntiForgeryToken()
            }
            else if (ViewBag.CanModifyTasks && Model.Project.UserId != ViewBag.CurrentUserId)
            {
                <button type="button" id="leave-project-btn" class="inline-flex items-center px-4 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700 transition-colors whitespace-nowrap">
                    <i class="fas fa-sign-out-alt mr-2"></i>
                    Projeden Ayrıl
                </button>
            }
        </div>
    </div>
    
    <!-- Bildirim Mesajları -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="bg-green-50 border-l-4 border-green-500 p-4 mb-6 auto-hide-message">
            <div class="flex">
                <div class="flex-shrink-0">
                    <i class="fas fa-check-circle text-green-500"></i>
                </div>
                <div class="ml-3">
                    <p class="text-sm text-green-700">@TempData["SuccessMessage"]</p>
                </div>
            </div>
        </div>
    }
    
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-6 auto-hide-message">
            <div class="flex">
                <div class="flex-shrink-0">
                    <i class="fas fa-exclamation-circle text-red-500"></i>
                </div>
                <div class="ml-3">
                    <p class="text-sm text-red-700">@TempData["ErrorMessage"]</p>
                </div>
            </div>
        </div>
    }
    
    <!-- Proje Detayları -->
    <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-100 mb-8">
        <h2 class="text-lg font-semibold text-gray-900 mb-3">Proje Detayları</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
                <div class="mb-4">
                    <h3 class="text-sm font-medium text-gray-500">Açıklama</h3>
                    <p class="text-gray-700 break-words whitespace-pre-wrap max-w-full overflow-hidden">@(string.IsNullOrEmpty(Model.Project.Description) ? "Açıklama yok" : Model.Project.Description)</p>
                </div>
                
                <div class="mb-4">
                    <h3 class="text-sm font-medium text-gray-500">Başlangıç Tarihi</h3>
                    <p class="text-gray-700">@Model.Project.StartDate.ToString("dd MMMM yyyy")</p>
                </div>
                
                <div>
                    <h3 class="text-sm font-medium text-gray-500">Bitiş Tarihi</h3>
                    <p class="text-gray-700">@Model.Project.EndDate.ToString("dd MMMM yyyy")</p>
                </div>
            </div>
            
            <div>
                <div class="mb-4">
                    <h3 class="text-sm font-medium text-gray-500">Son Güncelleme</h3>
                    <p class="text-gray-700">@(Model.Project.LastUpdatedDate.HasValue ? Model.Project.LastUpdatedDate.Value.ToString("dd MMMM yyyy HH:mm") : "Güncellenmemiş")</p>
                </div>
                
                <div class="mb-4">
                    <h3 class="text-sm font-medium text-gray-500">Tamamlanma Durumu</h3>
                    <div class="mt-2 flex items-center">
                        <div class="w-full bg-gray-200 rounded-full h-2 mr-2">
                            <div class="completion-bar bg-primary-500 h-2 rounded-full" style="width: @Model.CompletionPercentage%"></div>
                        </div>
                        <span class="completion-percentage text-sm text-gray-500">%@Model.CompletionPercentage</span>
                    </div>
                </div>

                <div>
                    <h3 class="text-sm font-medium text-gray-500">Ekip Üyeleri</h3>
                    <div class="mt-2 space-y-2">
                        @if (Model.TeamMembers != null && Model.TeamMembers.Any())
                        {
                            foreach (var member in Model.TeamMembers.Take(3))
                            {
                                <div class="flex items-center space-x-2">
                                    @if (!string.IsNullOrEmpty(member.UserProfileImage))
                                    {
                                        <img src="@member.UserProfileImage" alt="@member.UserFullName" class="w-6 h-6 rounded-full">
                                    }
                                    else
                                    {
                                        <div class="w-6 h-6 rounded-full bg-gray-300 flex items-center justify-center">
                                            <span class="text-xs text-gray-600 font-semibold">@member.UserFullName.Substring(0, 1)</span>
                                        </div>
                                    }
                                    <span class="text-sm text-gray-700">@member.UserFullName</span>
                                    <span class="text-xs text-gray-500">(@(member.Role.ToString() == "Owner" ? "Üye" : member.Role.ToString()))</span>
                                </div>
                            }
                            @if (Model.TeamMembers.Count > 3)
                            {
                                <div class="text-sm text-gray-500">
                                    ve @(Model.TeamMembers.Count - 3) kişi daha...
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-sm text-gray-500">Henüz ekip üyesi yok</p>
                        }
                        <div class="mt-2">
                            <a href="@Url.Action("Members", "Team", new { projectId = Model.Project.Id })" class="text-sm text-primary-600 hover:text-primary-800">
                                Tüm üyeleri görüntüle
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Görevler Bölümü (Trello-like) -->
    <div class="mb-8">
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-lg font-semibold text-gray-900">Görevler</h2>
            
            <!-- Yardım butonu ve ipucu -->
            <div class="relative" id="tasks-help-container">
                <button id="tasks-help-button" class="text-gray-500 hover:text-primary-500 focus:outline-none">
                    <i class="fas fa-question-circle text-xl"></i>
                </button>
                <div id="tasks-help-content" class="absolute right-0 mt-2 w-80 bg-white rounded-md shadow-lg py-4 px-4 hidden z-10">
                    <h3 class="font-medium text-gray-800 mb-2">Görevleri Taşıma ve Düzenleme Yardımı</h3>
                    <ul class="text-sm text-gray-600 space-y-2">
                        <li class="flex items-start">
                            <i class="fas fa-arrows-alt text-primary-500 mt-1 mr-2"></i>
                            <span>Görevleri <strong>sürüklerek bırakarak</strong> farklı durumlara taşıyabilirsiniz.</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-arrow-right text-primary-500 mt-1 mr-2"></i>
                            Veya görev kartlarındaki <strong>ok butonlarını</strong> kullanarak taşıyabilirsiniz.</li>
                        <li class="flex items-start">
                            <i class="fas fa-trash-alt text-red-500 mt-1 mr-2"></i>
                            <span>Görev silmek için kart üzerindeki <strong>çöp kutusu</strong> simgesine tıklayın.</span>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <!-- Todo Tasks -->
            <div class="bg-white rounded-lg shadow p-4 flex flex-col">
                <div class="flex justify-between items-center mb-4">
                    <div class="flex items-center">
                        <h3 class="text-lg font-semibold text-gray-800">Yapılacaklar</h3>
                        @if (canModifyTasks)
                        {
                            <button class="quick-add-task-btn ml-2 text-green-500 hover:text-green-700 transition-colors" data-status="0" data-project-id="@Model.Project.Id">
                                <i class="fas fa-plus-circle text-lg"></i>
                            </button>
                        }
                </div>
                    <span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded-full todo-count-badge" id="todo-count">@Model.TodoTasks.Count</span>
                </div>
                <div id="todo-tasks" class="task-container space-y-3 min-h-[200px] p-2 rounded-lg border-2 border-dashed border-blue-100 border-opacity-0 transition-all hover:border-opacity-100 overflow-y-auto flex-grow">
                    @foreach (var task in Model.TodoTasks)
                    {
                        <div class="task-card bg-white rounded-lg border border-gray-200 p-3 shadow-sm hover:shadow-md transition-shadow duration-200 cursor-grab active:cursor-grabbing" data-task-id="@task.Id">
                            <div class="flex justify-between items-start">
                                <h4 class="font-medium text-gray-800 mb-1 break-words max-w-[260px] truncate" title="@task.Name">@task.Name</h4>
                                @if (canModifyTasks)
                                {
                                <div class="task-actions ml-1 flex-shrink-0 flex items-center">
                                    <button class="edit-task-btn text-blue-500 hover:text-blue-700 mr-1" data-task-id="@task.Id">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="delete-task-btn text-red-500 hover:text-red-700" data-task-id="@task.Id">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </div>
                                }
                            </div>
                            @if (!string.IsNullOrEmpty(task.Description))
                            {
                                <p class="text-sm text-gray-600 mb-2 break-words whitespace-normal" style="word-wrap: break-word; max-width: 100%; overflow-wrap: break-word;">@task.Description</p>
                            }
                            <div class="flex flex-col space-y-2">
                                <div class="flex items-center justify-between">
                                    <span class="text-xs @(task.Priority == TaskPriority.Low ? "bg-blue-100 text-blue-800" : 
                                                     task.Priority == TaskPriority.Medium ? "bg-amber-100 text-amber-800" : 
                                                     task.Priority == TaskPriority.High ? "bg-orange-100 text-orange-800" : 
                                                     "bg-red-100 text-red-800") px-2 py-0.5 rounded-full">
                                        @(task.Priority == TaskPriority.Low ? "Düşük" : 
                                          task.Priority == TaskPriority.Medium ? "Orta" : 
                                          task.Priority == TaskPriority.High ? "Yüksek" : 
                                          "Acil")
                                    </span>
                                    @if (task.DueDate.HasValue)
                                    {
                                        <span class="text-xs text-gray-500">
                                            <i class="far fa-calendar-alt mr-1"></i>
                                            @task.DueDate.Value.ToString("dd MMM yyyy")
                                        </span>
                                    }
                                </div>
                                @if (task.AssignedMemberId != null)
                                {
                                    <div class="flex items-center mt-1">
                                        <span class="text-xs text-gray-600 flex items-center">
                                            @{
                                                var assignedMember = Model.TeamMembers.FirstOrDefault(m => m.UserId == task.AssignedMemberId);
                                            }
                                            @if (assignedMember != null)
                                            {
                                                <img src="@assignedMember.UserProfileImage" alt="@assignedMember.UserFullName" class="w-5 h-5 rounded-full mr-1 border border-gray-200" onerror="this.src='/images/profiles/default.png';">
                                                <span>@assignedMember.UserFullName</span>
                                            }
                                            else
                                            {
                                                <i class="fas fa-user mr-1"></i>
                                                <span>Atanmamış</span>
                                            }
                                        </span>
                                    </div>
                                }
                                @if (canModifyTasks)
                                {
                                    <div class="flex items-center justify-end space-x-1">
                                    <button class="move-task-btn bg-amber-100 text-amber-800 hover:bg-amber-200 text-xs px-2 py-1 rounded" data-task-id="@task.Id" data-status="1">
                                        <i class="fas fa-arrow-right"></i> Devam Ediyor
                                    </button>
                                </div>
                                }
                            </div>
                        </div>
                    }
                </div>
                
                @if (canModifyTasks)
                {
                    <div class="add-task-card bg-white rounded-lg border-2 border-dashed border-gray-200 p-3 hover:border-blue-300 transition-colors duration-200 cursor-pointer mt-3">
                        <button type="button" class="w-full text-left text-gray-500 hover:text-gray-700" data-project-id="@Model.Project.Id" data-status="0">
                            <i class="fas fa-plus mr-2"></i> Yeni Görev Ekle
                        </button>
                        </div>
                }
            </div>
            
            <!-- In Progress Tasks -->
            <div class="bg-white rounded-lg shadow p-4 flex flex-col">
                <div class="flex justify-between items-center mb-4">
                    <div class="flex items-center">
                        <h3 class="text-lg font-semibold text-gray-800">Devam Edenler</h3>
                        @if (canModifyTasks)
                        {
                            <button class="quick-add-task-btn ml-2 text-green-500 hover:text-green-700 transition-colors" data-status="1" data-project-id="@Model.Project.Id">
                                <i class="fas fa-plus-circle text-lg"></i>
                            </button>
                        }
                </div>
                    <span class="bg-amber-100 text-amber-800 text-xs font-medium px-2.5 py-0.5 rounded-full in-progress-count-badge" id="in-progress-count">@Model.InProgressTasks.Count</span>
                </div>
                <div id="in-progress-tasks" class="task-container space-y-3 min-h-[200px] p-2 rounded-lg border-2 border-dashed border-amber-100 border-opacity-0 transition-all hover:border-opacity-100 overflow-y-auto flex-grow">
                    @foreach (var task in Model.InProgressTasks)
                    {
                        <div class="task-card bg-white rounded-lg border border-gray-200 p-3 shadow-sm hover:shadow-md transition-shadow duration-200 cursor-grab active:cursor-grabbing" data-task-id="@task.Id">
                            <div class="flex justify-between items-start">
                                <h4 class="font-medium text-gray-800 mb-1 break-words max-w-[260px] truncate" title="@task.Name">@task.Name</h4>
                                @if (canModifyTasks)
                                {
                                <div class="task-actions ml-1 flex-shrink-0 flex items-center">
                                    <button class="edit-task-btn text-blue-500 hover:text-blue-700 mr-1" data-task-id="@task.Id">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="delete-task-btn text-red-500 hover:text-red-700" data-task-id="@task.Id">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </div>
                                }
                            </div>
                            @if (!string.IsNullOrEmpty(task.Description))
                            {
                                <p class="text-sm text-gray-600 mb-2 break-words whitespace-normal" style="word-wrap: break-word; max-width: 100%; overflow-wrap: break-word;">@task.Description</p>
                            }
                            <div class="flex flex-col space-y-2">
                                <div class="flex items-center justify-between">
                                    <span class="text-xs @(task.Priority == TaskPriority.Low ? "bg-blue-100 text-blue-800" : 
                                                     task.Priority == TaskPriority.Medium ? "bg-amber-100 text-amber-800" : 
                                                     task.Priority == TaskPriority.High ? "bg-orange-100 text-orange-800" : 
                                                     "bg-red-100 text-red-800") px-2 py-0.5 rounded-full">
                                        @(task.Priority == TaskPriority.Low ? "Düşük" : 
                                          task.Priority == TaskPriority.Medium ? "Orta" : 
                                          task.Priority == TaskPriority.High ? "Yüksek" : 
                                          "Acil")
                                    </span>
                                    @if (task.DueDate.HasValue)
                                    {
                                        <span class="text-xs text-gray-500">
                                            <i class="far fa-calendar-alt mr-1"></i>
                                            @task.DueDate.Value.ToString("dd MMM yyyy")
                                        </span>
                                    }
                                </div>
                                @if (task.AssignedMemberId != null)
                                {
                                    <div class="flex items-center mt-1">
                                        <span class="text-xs text-gray-600 flex items-center">
                                            @{
                                                var assignedMember = Model.TeamMembers.FirstOrDefault(m => m.UserId == task.AssignedMemberId);
                                            }
                                            @if (assignedMember != null)
                                            {
                                                <img src="@assignedMember.UserProfileImage" alt="@assignedMember.UserFullName" class="w-5 h-5 rounded-full mr-1 border border-gray-200" onerror="this.src='/images/profiles/default.png';">
                                                <span>@assignedMember.UserFullName</span>
                                            }
                                            else
                                            {
                                                <i class="fas fa-user mr-1"></i>
                                                <span>Atanmamış</span>
                                            }
                                        </span>
                                    </div>
                                }
                                @if (canModifyTasks)
                                {
                                    <div class="flex justify-between items-center mt-2">
                                    <button class="move-task-btn bg-blue-100 text-blue-800 hover:bg-blue-200 text-xs px-2 py-1 rounded" data-task-id="@task.Id" data-status="0">
                                        <i class="fas fa-arrow-left"></i> Yapılacak
                                    </button>
                                    <button class="move-task-btn bg-green-100 text-green-800 hover:bg-green-200 text-xs px-2 py-1 rounded" data-task-id="@task.Id" data-status="2">
                                        <i class="fas fa-arrow-right"></i> Tamamlandı
                                    </button>
                                </div>
                                }
                            </div>
                        </div>
                    }
                </div>
                
                @if (canModifyTasks)
                {
                    <div class="add-task-card bg-white rounded-lg border-2 border-dashed border-gray-200 p-3 hover:border-amber-300 transition-colors duration-200 cursor-pointer mt-3">
                        <button type="button" class="w-full text-left text-gray-500 hover:text-gray-700" data-project-id="@Model.Project.Id" data-status="1">
                            <i class="fas fa-plus mr-2"></i> Yeni Görev Ekle
                        </button>
                        </div>
                }
            </div>
            
            <!-- Done Tasks -->
            <div class="bg-white rounded-lg shadow p-4 flex flex-col">
                <div class="flex justify-between items-center mb-4">
                    <div class="flex items-center">
                        <h3 class="text-lg font-semibold text-gray-800">Tamamlananlar</h3>
                        @if (canModifyTasks)
                        {
                            <button class="quick-add-task-btn ml-2 text-green-500 hover:text-green-700 transition-colors" data-status="2" data-project-id="@Model.Project.Id">
                                <i class="fas fa-plus-circle text-lg"></i>
                            </button>
                        }
                </div>
                    <span class="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full done-count-badge" id="done-count">@Model.DoneTasks.Count</span>
                </div>
                <div id="done-tasks" class="task-container space-y-3 min-h-[200px] p-2 rounded-lg border-2 border-dashed border-green-100 border-opacity-0 transition-all hover:border-opacity-100 overflow-y-auto flex-grow">
                    @foreach (var task in Model.DoneTasks)
                    {
                        <div class="task-card bg-white rounded-lg border border-gray-200 p-3 shadow-sm hover:shadow-md transition-shadow duration-200 cursor-grab active:cursor-grabbing" data-task-id="@task.Id">
                            <div class="flex justify-between items-start">
                                <h4 class="font-medium text-gray-800 mb-1 break-words max-w-[260px] truncate" title="@task.Name">@task.Name</h4>
                                @if (canModifyTasks)
                                {
                                <div class="task-actions ml-1 flex-shrink-0 flex items-center">
                                    <button class="edit-task-btn text-blue-500 hover:text-blue-700 mr-1" data-task-id="@task.Id">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="delete-task-btn text-red-500 hover:text-red-700" data-task-id="@task.Id">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </div>
                                }
                            </div>
                            @if (!string.IsNullOrEmpty(task.Description))
                            {
                                <p class="text-sm text-gray-600 mb-2 break-words whitespace-normal" style="word-wrap: break-word; max-width: 100%; overflow-wrap: break-word;">@task.Description</p>
                            }
                            <div class="flex flex-col space-y-2">
                                <div class="flex items-center justify-between">
                                    <span class="text-xs @(task.Priority == TaskPriority.Low ? "bg-blue-100 text-blue-800" : 
                                                     task.Priority == TaskPriority.Medium ? "bg-amber-100 text-amber-800" : 
                                                     task.Priority == TaskPriority.High ? "bg-orange-100 text-orange-800" : 
                                                     "bg-red-100 text-red-800") px-2 py-0.5 rounded-full">
                                        @(task.Priority == TaskPriority.Low ? "Düşük" : 
                                          task.Priority == TaskPriority.Medium ? "Orta" : 
                                          task.Priority == TaskPriority.High ? "Yüksek" : 
                                          "Acil")
                                    </span>
                                    @if (task.DueDate.HasValue)
                                    {
                                        <span class="text-xs text-gray-500">
                                            <i class="far fa-calendar-alt mr-1"></i>
                                            @task.DueDate.Value.ToString("dd MMM yyyy")
                                        </span>
                                    }
                                </div>
                                @if (task.AssignedMemberId != null)
                                {
                                    <div class="flex items-center mt-1">
                                        <span class="text-xs text-gray-600 flex items-center">
                                            @{
                                                var assignedMember = Model.TeamMembers.FirstOrDefault(m => m.UserId == task.AssignedMemberId);
                                            }
                                            @if (assignedMember != null)
                                            {
                                                <img src="@assignedMember.UserProfileImage" alt="@assignedMember.UserFullName" class="w-5 h-5 rounded-full mr-1 border border-gray-200" onerror="this.src='/images/profiles/default.png';">
                                                <span>@assignedMember.UserFullName</span>
                                            }
                                            else
                                            {
                                                <i class="fas fa-user mr-1"></i>
                                                <span>Atanmamış</span>
                                            }
                                        </span>
                                    </div>
                                }
                                @if (canModifyTasks)
                                {
                                    <div class="flex justify-end items-center mt-2">
                                    <button class="move-task-btn bg-amber-100 text-amber-800 hover:bg-amber-200 text-xs px-2 py-1 rounded" data-task-id="@task.Id" data-status="1">
                                        <i class="fas fa-arrow-left"></i> Devam Ediyor
                                    </button>
                                </div>
                                }
                            </div>
                        </div>
                    }
                </div>
                
                @if (canModifyTasks)
                {
                    <div class="add-task-card bg-white rounded-lg border-2 border-dashed border-gray-200 p-3 hover:border-green-300 transition-colors duration-200 cursor-pointer mt-3">
                        <button type="button" class="w-full text-left text-gray-500 hover:text-gray-700" data-project-id="@Model.Project.Id" data-status="2">
                            <i class="fas fa-plus mr-2"></i> Yeni Görev Ekle
                        </button>
                        </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Görev Ekleme Modalı -->
<div id="add-task-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-6 border w-[500px] shadow-lg rounded-lg bg-white">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-xl font-semibold text-gray-900">Yeni Görev Ekle</h3>
            <button type="button" id="close-task-modal" class="text-gray-400 hover:text-gray-500">
                <i class="fas fa-times"></i>
            </button>
        </div>
        
        <form asp-action="CreateTask" asp-controller="Project" method="post" class="space-y-4" id="create-task-form">
            @Html.AntiForgeryToken()
            <input type="hidden" id="task-project-id" name="ProjectId" />
            <input type="hidden" id="task-status" name="Status" />
            
                <div>
                <label for="task-name" class="block text-sm font-medium text-gray-700 mb-1">Görev Adı</label>
                <input type="text" id="task-name" name="Name" required maxlength="100"
                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 text-gray-900"
                       placeholder="Görev adını girin">
                <p class="text-xs text-gray-500 mt-1">Maksimum 100 karakter</p>
                </div>
                
                <div>
                <label for="task-description" class="block text-sm font-medium text-gray-700 mb-1">Açıklama</label>
                <textarea id="task-description" name="Description" rows="3" maxlength="500"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 text-gray-900"
                        placeholder="Görev açıklamasını girin"></textarea>
                <p class="text-xs text-gray-500 mt-1">Maksimum 500 karakter</p>
                </div>
                
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label for="task-priority" class="block text-sm font-medium text-gray-700 mb-1">Öncelik</label>
                    <select id="task-priority" name="Priority"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 text-gray-900">
                        <option value="0">Düşük</option>
                        <option value="1">Orta</option>
                        <option value="2">Yüksek</option>
                        <option value="3">Acil</option>
                    </select>
                </div>
                
                <div>
                    <label for="task-due-date" class="block text-sm font-medium text-gray-700 mb-1">Bitiş Tarihi</label>
                    <input type="date" id="task-due-date" name="DueDate"
                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 text-gray-900">
                </div>
            </div>
            
            <div>
                <label for="task-assigned-member" class="block text-sm font-medium text-gray-700 mb-1">Atanan Üye</label>
                <select id="task-assigned-member" name="AssignedMemberId"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 text-gray-900">
                    <option value="">Seçiniz...</option>
                    @foreach (var member in Model.TeamMembers)
                    {
                        <option value="@member.UserId">@member.UserFullName</option>
                    }
                </select>
            </div>
            
            <div class="flex justify-end space-x-3 pt-4">
                <button type="button" id="cancel-task" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50 transition-colors focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-offset-1">
                    İptal
                </button>
                <button type="submit" class="px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-1">
                    Kaydet
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Görev Silme Modalı -->
<div id="delete-task-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-medium leading-6 text-gray-900">Görevi Sil</h3>
                <button id="close-delete-task-modal" class="text-gray-400 hover:text-gray-500 focus:outline-none">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <p class="text-sm text-gray-500 mb-4">Bu görevi silmek istediğinize emin misiniz?</p>
            <input type="hidden" id="delete-task-id" name="taskId" />
            <div class="flex justify-end space-x-3">
                <button type="button" id="cancel-delete-task"
                        class="px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200">
                    İptal
                </button>
                <button type="button" id="confirm-delete-task"
                        class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700">
                    Sil
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Görev Düzenleme Modal -->
<div id="edit-task-modal" class="fixed inset-0 flex items-center justify-center z-50 hidden">
    <div class="absolute inset-0 bg-black opacity-50"></div>
    <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4 relative z-10 shadow-xl">
        <h3 class="text-xl font-medium text-gray-900 mb-4">Görev Düzenle</h3>
        
        <div class="absolute top-4 right-4">
            <button id="close-edit-task-modal" class="text-gray-400 hover:text-gray-500">
                <i class="fas fa-times"></i>
            </button>
        </div>
        
        <form id="edit-task-form" class="space-y-4">
            @Html.AntiForgeryToken()
            <input type="hidden" id="edit-task-id" name="Id" />
            <input type="hidden" id="edit-task-project-id" name="ProjectId" value="@Model.Project.Id" />
            <input type="hidden" id="edit-task-status" name="Status" />
            
            <div>
                <label for="edit-task-name" class="block text-sm font-medium text-gray-700 mb-1">Görev Adı</label>
                <input type="text" id="edit-task-name" name="Name" required maxlength="100"
                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 text-gray-900"
                       placeholder="Görev adını girin">
                <p class="text-xs text-gray-500 mt-1">Maksimum 100 karakter</p>
            </div>
            
            <div>
                <label for="edit-task-description" class="block text-sm font-medium text-gray-700 mb-1">Açıklama</label>
                <textarea id="edit-task-description" name="Description" rows="3" maxlength="500"
                          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 text-gray-900"
                          placeholder="Görev açıklamasını girin"></textarea>
                <p class="text-xs text-gray-500 mt-1">Maksimum 500 karakter</p>
            </div>
            
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label for="edit-task-priority" class="block text-sm font-medium text-gray-700 mb-1">Öncelik</label>
                    <select id="edit-task-priority" name="Priority"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 text-gray-900">
                        <option value="0">Düşük</option>
                        <option value="1">Orta</option>
                        <option value="2">Yüksek</option>
                        <option value="3">Acil</option>
                    </select>
                </div>
                
                <div>
                    <label for="edit-task-due-date" class="block text-sm font-medium text-gray-700 mb-1">Bitiş Tarihi</label>
                    <input type="date" id="edit-task-due-date" name="DueDate"
                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 text-gray-900">
                </div>
            </div>
            
            <div>
                <label for="edit-task-assigned-member" class="block text-sm font-medium text-gray-700 mb-1">Atanan Üye</label>
                <select id="edit-task-assigned-member" name="AssignedMemberId"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 text-gray-900">
                    <option value="">Atanmamış</option>
                    @foreach (var member in Model.TeamMembers)
                    {
                        <option value="@member.MemberId" data-user-id="@member.UserId">@member.UserFullName</option>
                    }
                </select>
            </div>
            
            <div class="flex justify-end mt-4 gap-2">
                <button type="button" id="cancel-edit-task" class="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400">İptal</button>
                <button type="button" id="edit-task-save-btn" class="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700">Kaydet</button>
            </div>
        </form>
    </div>
</div>

<!-- Proje Silme Modalı -->
<div id="delete-project-modal" class="fixed inset-0 z-50 overflow-y-auto hidden" aria-modal="true" role="dialog">
    <div class="flex items-center justify-center min-h-screen">
        <!-- Arkaplan overlay -->
        <div class="fixed inset-0 bg-black bg-opacity-50 transition-opacity"></div>
        
        <!-- Modal içeriği -->
        <div id="delete-modal-content" class="bg-white rounded-lg max-w-md w-full mx-auto shadow-xl transform transition-all ease-out duration-300 opacity-0 scale-95 relative">
            <!-- Kapatma butonu -->
            <button id="close-delete-modal" type="button" class="absolute top-3 right-3 text-gray-400 hover:text-gray-500">
                <i class="fas fa-times"></i>
            </button>
            
            <div class="p-6">
                <div class="text-center mb-4">
                    <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 mb-4">
                        <i class="fas fa-exclamation-triangle text-red-600 text-xl"></i>
                    </div>
                    <h3 class="text-lg font-medium text-gray-900">Projeyi Silmek İstediğinize Emin Misiniz?</h3>
                    </div>
                
                <div class="mt-2">
                    <p class="text-sm text-gray-500">
                        Bu işlem geri alınamaz. Proje ve tüm görevleri kalıcı olarak silinecektir.
                    </p>
        </div>
        
                @Html.AntiForgeryToken()
                
                <div class="mt-6 flex space-x-3 justify-center">
                    <button type="button" id="cancel-delete" class="px-4 py-2 bg-white border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Vazgeç
            </button>
            <button type="button" id="confirm-delete" class="px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-1">
                Projeyi Sil
            </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Projeden Ayrılma Modal -->
<div id="leave-project-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-md transform transition-all scale-95 opacity-0" id="leave-modal-content">
        <div class="flex items-center justify-between mb-4">
            <h3 class="text-xl font-semibold text-yellow-600">Projeden Ayrıl</h3>
            <button id="close-leave-modal" class="text-gray-400 hover:text-gray-500 focus:outline-none">
                <i class="fas fa-times"></i>
            </button>
        </div>
        
        <div class="mb-6">
            <p class="text-gray-700 mb-4">Bu projeden ayrılmak istediğinize emin misiniz?</p>
            
            <div class="bg-yellow-50 border-l-4 border-yellow-500 p-4 mb-4">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <i class="fas fa-exclamation-triangle text-yellow-500"></i>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm text-yellow-700">Projeden ayrıldıktan sonra tüm proje erişiminizi kaybedeceksiniz. Bu işlem geri alınamaz.</p>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="flex justify-end space-x-3">
            <button type="button" id="cancel-leave" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50 transition-colors focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-offset-1">
                İptal
            </button>
            <button type="button" id="confirm-leave" class="px-4 py-2 bg-yellow-500 hover:bg-yellow-600 text-white rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-1">
                Projeden Ayrıl
            </button>
        </div>
    </div>
</div>

@section Scripts {
    <!-- SortableJS kütüphanesi -->
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    
    <!-- SignalR kütüphanesini güvenli bir şekilde ekle -->
    <script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@7.0.0/dist/browser/signalr.min.js"></script>
    
    <script>
        // DOM yüklendikten sonra çalıştır
        $(document).ready(function() {
            console.log("DOM ready - Task permissions: canModifyTasks=@canModifyTasks");
        
            // Mesajları otomatik gizleme
            setTimeout(function() {
                $(".alert").fadeOut(500);
            }, 5000);
            
            // SignalR bağlantısı
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/taskHub")
                .withAutomaticReconnect()
                .build();
                
            // SignalR bağlantısını başlat
            connection.start()
                .then(() => {
                    console.log("SignalR bağlantısı kuruldu");
                    // Proje grubuna katıl
                    connection.invoke("JoinProjectGroup", @Model.Project.Id)
                        .then(() => {
                            console.log("Proje grubuna katıldı: @Model.Project.Id");
                        })
                        .catch(err => {
                            console.error("Proje grubuna katılırken hata oluştu:", err);
                        });
                })
                .catch(err => {
                    console.error("SignalR bağlantısı kurulamadı:", err);
                });
            
            // Yeni görev eklendiğinde
            connection.on("ReceiveNewTask", function(payload) {
                console.log("SignalR: Yeni görev eklendi", payload);
                
                // Sayfayı yenileme gerekebilir, ancak ileride dinamik olarak yeni görev kart oluşturma ile geliştirilebilir
                window.location.reload();
            });
            
            // Görev durumu değiştiğinde
            connection.on("ReceiveTaskStatusChange", function(taskId, newStatus, payload) {
                console.log("SignalR: Görev durumu değişti", taskId, newStatus, payload);
                
                // Görev ID'si ile kartı bul
                const taskCard = $(`.task-card[data-task-id="${taskId}"]`);
                
                // Kart bulunamadıysa, sayfayı yenile
                if (taskCard.length === 0) {
                    return;
                }
                
                // Görevin eski durumunu belirle
                let oldStatus;
                if (taskCard.closest('#todo-tasks').length > 0) {
                    oldStatus = 0;
                } else if (taskCard.closest('#in-progress-tasks').length > 0) {
                    oldStatus = 1;
                } else if (taskCard.closest('#done-tasks').length > 0) {
                    oldStatus = 2;
                }
                
                // Durum değiştiyse, görevi taşı
                if (oldStatus !== newStatus) {
                    // Kartı eski konumundan kaldır
                    taskCard.fadeOut(300, function() {
                        taskCard.detach();
                        
                        // Yeni konuma ekle
                        let targetContainer;
                        if (newStatus === 0) {
                            targetContainer = $('#todo-tasks');
                        } else if (newStatus === 1) {
                            targetContainer = $('#in-progress-tasks');
                        } else {
                            targetContainer = $('#done-tasks');
                        }
                        
                        // Taşıma butonlarını güncelle ve görevi ekle
                        updateTaskButtons(taskCard, newStatus);
                        targetContainer.prepend(taskCard);
                        taskCard.hide().fadeIn(300);
                        
                        // Sayaçları ve tamamlanma yüzdesini güncelle
                        updateTaskCounters();
                        updateCompletionPercentage();
                    });
                }
                
                // Görev içeriğini güncelle, eğer payload içinde task değeri varsa
                if (payload && payload.task) {
                    const task = payload.task;
                    taskCard.find('h4').text(task.name);
                    
                    // Açıklama alanını güncelle
                    updateTaskDescription(taskCard, task.description);
                    
                    // Önceliği güncelle
                    const prioritySpan = taskCard.find('span.rounded-full').first();
                    const priorityClasses = {
                        0: 'bg-blue-100 text-blue-800',
                        1: 'bg-amber-100 text-amber-800',
                        2: 'bg-orange-100 text-orange-800',
                        3: 'bg-red-100 text-red-800'
                    };
                    const priorityTexts = {
                        0: 'Düşük',
                        1: 'Orta',
                        2: 'Yüksek',
                        3: 'Acil'
                    };
                    
                    prioritySpan.removeClass('bg-blue-100 text-blue-800 bg-amber-100 text-amber-800 bg-orange-100 text-orange-800 bg-red-100 text-red-800');
                    prioritySpan.addClass(priorityClasses[task.priority]);
                    prioritySpan.text(priorityTexts[task.priority]);
                    
                    // Atanan üyeyi güncellemek için atanmış üye bölümünü bul
                    if (payload.assignedMember) {
                        updateAssignedMemberWithPayload(taskCard, payload.assignedMember);
                    } else {
                        updateAssignedMemberInCard(taskCard, task.assignedMemberId);
                    }
                }
            });
            
            // Task güncellendiğinde
            connection.on("ReceiveTaskUpdate", function(taskId, payload) {
                console.log("SignalR: Görev güncellendi", taskId, payload);
                
                // Görev ID'si ile kartı bul
                const taskCard = $(`.task-card[data-task-id="${taskId}"]`);
                
                // Kart bulunamadıysa, sayfayı yenile
                if (taskCard.length === 0) {
                    return;
                }
                
                // Görev içeriğini güncelle
                if (payload && payload.task) {
                    const task = payload.task;
                    
                    // Görevin eski durumunu belirle
                    let oldStatus;
                    if (taskCard.closest('#todo-tasks').length > 0) {
                        oldStatus = 0;
                    } else if (taskCard.closest('#in-progress-tasks').length > 0) {
                        oldStatus = 1;
                    } else if (taskCard.closest('#done-tasks').length > 0) {
                        oldStatus = 2;
                    }
                    
                    // Durum değiştiyse, görevi taşı
                    if (oldStatus !== task.status) {
                        // Kartı eski konumundan kaldır
                        taskCard.fadeOut(300, function() {
                            taskCard.detach();
                            
                            // Yeni konuma ekle
                            let targetContainer;
                            if (task.status === 0) {
                                targetContainer = $('#todo-tasks');
                            } else if (task.status === 1) {
                                targetContainer = $('#in-progress-tasks');
                            } else {
                                targetContainer = $('#done-tasks');
                            }
                            
                            // Taşıma butonlarını güncelle ve görevi ekle
                            updateTaskButtons(taskCard, task.status);
                            targetContainer.prepend(taskCard);
                            taskCard.hide().fadeIn(300);
                            
                            // Sayaçları ve tamamlanma yüzdesini güncelle
                            updateTaskCounters();
                            updateCompletionPercentage();
                        });
                    }
                    
                    // Temel görev bilgilerini güncelle
                    taskCard.find('h4').text(task.name);
                    
                    // Açıklama alanını güncelle
                    updateTaskDescription(taskCard, task.description);
                    
                    // Önceliği güncelle
                    const prioritySpan = taskCard.find('span.rounded-full').first();
                    const priorityClasses = {
                        0: 'bg-blue-100 text-blue-800',
                        1: 'bg-amber-100 text-amber-800',
                        2: 'bg-orange-100 text-orange-800',
                        3: 'bg-red-100 text-red-800'
                    };
                    const priorityTexts = {
                        0: 'Düşük',
                        1: 'Orta',
                        2: 'Yüksek',
                        3: 'Acil'
                    };
                    
                    prioritySpan.removeClass('bg-blue-100 text-blue-800 bg-amber-100 text-amber-800 bg-orange-100 text-orange-800 bg-red-100 text-red-800');
                    prioritySpan.addClass(priorityClasses[task.priority]);
                    prioritySpan.text(priorityTexts[task.priority]);
                    
                    // Atanan üyeyi güncellemek için atanmış üye bölümünü bul
                    if (payload.assignedMember) {
                        updateAssignedMemberWithPayload(taskCard, payload.assignedMember);
                    } else {
                        updateAssignedMemberInCard(taskCard, task.assignedMemberId);
                    }
                }
            });
            
            // Görev silindiğinde
            connection.on("ReceiveTaskDelete", function(taskId) {
                console.log("SignalR: Görev silindi", taskId);
                
                // Silinecek görevi bul ve animasyonla kaldır
                const taskCard = $(`.task-card[data-task-id="${taskId}"]`);
                if (taskCard.length > 0) {
                    taskCard.fadeOut(300, function() {
                        $(this).remove();
                        
                        // Sayaçları ve tamamlanma yüzdesini güncelle
                        updateTaskCounters();
                        updateCompletionPercentage();
                    });
                }
            });
            
            // Atanan üye güncellemesi için yardımcı fonksiyon (member ID ve server data kullanarak)
            function updateAssignedMemberInCard(taskCard, assignedMemberId) {
                const assignedMemberDiv = taskCard.find('.flex.items-center.mt-1');
                const teamMembers = @Html.Raw(Json.Serialize(Model.TeamMembers));
                
                if (assignedMemberId) {
                    const member = teamMembers.find(m => m.userId === assignedMemberId);
                    
                    if (member) {
                        let assignedMemberHtml = `
                            <div class="flex items-center mt-1">
                                <span class="text-xs text-gray-600 flex items-center">
                                    <img src="${member.userProfileImage}" alt="${member.userFullName}" class="w-5 h-5 rounded-full mr-1 border border-gray-200" onerror="this.src='/images/profiles/default.png';">
                                    <span>${member.userFullName}</span>
                                </span>
                            </div>
                        `;
                        
                        if (assignedMemberDiv.length === 0) {
                            // Atanan üye bölümü yoksa ekle
                            const priorityContainer = taskCard.find('.flex.items-center.justify-between').closest('div');
                            priorityContainer.after(assignedMemberHtml);
                        } else {
                            // Varsa güncelle
                            assignedMemberDiv.replaceWith(assignedMemberHtml);
                        }
                    }
                } else if (assignedMemberDiv.length > 0) {
                    // Atanan üye yoksa ve bölüm varsa kaldır
                    assignedMemberDiv.remove();
                }
            }
            
            // Atanan üye güncellemesi için yardımcı fonksiyon (payload data kullanarak)
            function updateAssignedMemberWithPayload(taskCard, memberData) {
                const assignedMemberDiv = taskCard.find('.flex.items-center.mt-1');
                
                if (memberData) {
                    let assignedMemberHtml = `
                        <div class="flex items-center mt-1">
                            <span class="text-xs text-gray-600 flex items-center">
                                <img src="${memberData.userProfileImage}" alt="${memberData.userFullName}" class="w-5 h-5 rounded-full mr-1 border border-gray-200" onerror="this.src='/images/profiles/default.png';">
                                <span>${memberData.userFullName}</span>
                            </span>
                        </div>
                    `;
                    
                    if (assignedMemberDiv.length === 0) {
                        // Atanan üye bölümü yoksa ekle
                        const priorityContainer = taskCard.find('.flex.items-center.justify-between').closest('div');
                        priorityContainer.after(assignedMemberHtml);
                    } else {
                        // Varsa güncelle
                        assignedMemberDiv.replaceWith(assignedMemberHtml);
                    }
                } else if (assignedMemberDiv.length > 0) {
                    // Atanan üye yoksa ve bölüm varsa kaldır
                    assignedMemberDiv.remove();
                }
            }
            
            // Proje silme butonu ve modal işlemleri
            $("#delete-project-btn").on("click", function() {
                console.log("Delete project button clicked");
                // Modalı göster
                $("#delete-project-modal").removeClass("hidden");
                // Modalın animasyon sınıflarını ekle
                setTimeout(() => {
                    $("#delete-modal-content").removeClass("scale-95 opacity-0");
                    $("#delete-modal-content").addClass("scale-100 opacity-100");
                }, 10);
                $("body").css("overflow", "hidden"); // Arka planı kaydırmayı engelle
            });
            
            // Görev taşıma butonlarının tıklama olayını ele al
            $(document).on("click", ".move-task-btn", function() {
                console.log("Move task button clicked");
                const taskId = $(this).data("task-id");
                const newStatus = $(this).data("status");
                console.log("Moving task", taskId, "to status", newStatus);
                
                // AJAX ile görev durumunu güncelle
                $.ajax({
                    url: "@Url.Action("UpdateTaskStatus", "Project")",
                    type: "POST",
                    data: {
                        taskId: taskId,
                        newStatus: newStatus
                    },
                    success: function(response) {
                        if (response.success) {
                            console.log("Task status updated successfully");
                            const taskCard = $(`.task-card[data-task-id="${taskId}"]`);
                            
                            // Kartı eski konumundan kaldır
                            taskCard.fadeOut(300, function() {
                                taskCard.detach();
                                
                                // Yeni konuma ekle
                                let targetContainer;
                                if (newStatus === 0) {
                                    targetContainer = $('#todo-tasks');
                                } else if (newStatus === 1) {
                                    targetContainer = $('#in-progress-tasks');
                                } else {
                                    targetContainer = $('#done-tasks');
                                }
                                
                                // Taşıma butonlarını güncelle ve görevi ekle
                                updateTaskButtons(taskCard, newStatus);
                                targetContainer.prepend(taskCard);
                                taskCard.hide().fadeIn(300);
                                
                                // Sayaçları ve tamamlanma yüzdesini güncelle
                                updateTaskCounters();
                                updateCompletionPercentage();
                                
                                // Kullanıcıya bildir
                                showNotification("Görev durumu güncellendi", "success");
                            });
                        }
                    },
                    error: function(xhr, status, error) {
                        showNotification("Bağlantı hatası oluştu. Lütfen tekrar deneyin.", "error");
                        window.location.reload();
                    }
                });
            });
            
            // Proje silme modalı kapatma
            $("#close-delete-modal, #cancel-delete").on("click", function() {
                console.log("Close delete modal");
                // Modalın animasyon sınıflarını kaldır
                $("#delete-modal-content").removeClass("scale-100 opacity-100");
                $("#delete-modal-content").addClass("scale-95 opacity-0");
                
                // Animasyon bittikten sonra modalı gizle
                setTimeout(() => {
                    $("#delete-project-modal").addClass("hidden");
                    $("body").css("overflow", ""); // Kaydırmayı tekrar etkinleştir
                }, 300);
            });
            
            // Proje silme işlemi
            $("#confirm-delete").on("click", function() {
                console.log("Confirm delete project");
                
                // AJAX ile projeyi sil
                $.ajax({
                    url: "@Url.Action("Delete", "Project")",
                    type: "POST",
                    headers: {
                        "X-Requested-With": "XMLHttpRequest"
                    },
                    data: {
                        id: @Model.Project.Id,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        console.log("Project delete response:", response);
                        
                        if (response.success) {
                            showNotification("Proje başarıyla silindi", "success");
                            
                            // Kısa bir süre sonra Dashboard'a yönlendir
                            setTimeout(function() {
                                window.location.href = "@Url.Action("Index", "Dashboard")";
                            }, 1000);
                        } else {
                            // Modalı kapat
                            $("#delete-modal-content").removeClass("scale-100 opacity-100");
                            $("#delete-modal-content").addClass("scale-95 opacity-0");
                            
                            setTimeout(() => {
                                $("#delete-project-modal").addClass("hidden");
                                $("body").css("overflow", "");
                            }, 300);
                            
                            // Hata mesajı göster
                            showNotification("Proje silinirken bir hata oluştu: " + response.message, "error");
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error("Project delete error:", error);
                        console.error("Response:", xhr.responseText);
                        
                        // Modalı kapat
                        $("#delete-modal-content").removeClass("scale-100 opacity-100");
                        $("#delete-modal-content").addClass("scale-95 opacity-0");
                        
                        setTimeout(() => {
                            $("#delete-project-modal").addClass("hidden");
                            $("body").css("overflow", "");
                        }, 300);
                        
                        // Hata mesajı göster
                        showNotification("Proje silinirken bir hata oluştu: " + error, "error");
                    }
                });
            });
            
            // Görev ekleme butonları için event listener'lar - Debug için console.log ekledik
            $(".add-task-card button").on("click", function() {
                console.log("Add task card button clicked");
                const projectId = $(this).data("project-id");
                const status = $(this).data("status");
                console.log("Project ID:", projectId, "Status:", status);
                showAddTaskModal(projectId, status);
            });
            
            // Hızlı görev ekleme butonları için event listener - Debug için console.log ekledik
            $(".quick-add-task-btn").on("click", function() {
                console.log("Quick add task button clicked");
                const projectId = $(this).data("project-id");
                const status = $(this).data("status");
                console.log("Project ID:", projectId, "Status:", status);
                showAddTaskModal(projectId, status);
            });
            
            // Yeni görev ekleme modalını göster
            function showAddTaskModal(projectId, status) {
                console.log("Showing add task modal for project:", projectId, "status:", status);
                // Modal değerlerini ayarla
                $("#task-project-id").val(projectId);
                $("#task-status").val(status);
                
                // Modalı göster
                $("#add-task-modal").removeClass("hidden");
                $("body").css("overflow", "hidden"); // Arka planı kaydırmayı engelle
            }
            
            // Görev ekleme modalı kapatma
            $("#close-task-modal, #cancel-task").on("click", function() {
                $("#add-task-modal").addClass("hidden");
                $("body").css("overflow", ""); // Kaydırmayı tekrar etkinleştir
                $("#create-task-form")[0].reset();
            });
            
            // Görev silme
            $(document).on("click", ".delete-task-btn", function() {
                console.log("Delete task button clicked");
                const taskId = $(this).data("task-id");
                console.log("Task ID:", taskId);
                $("#delete-task-id").val(taskId);
                $("#delete-task-modal").removeClass("hidden");
                $("body").css("overflow", "hidden");
            });
            
            // Görev silme modalı kapatma
            $("#close-delete-task-modal, #cancel-delete-task").on("click", function() {
                $("#delete-task-modal").addClass("hidden");
                $("body").css("overflow", "");
            });
            
            // Görev silme işlemi
            $("#confirm-delete-task").on("click", function() {
                const taskId = $("#delete-task-id").val();
                console.log("Confirming delete for task ID:", taskId);
                
                $.ajax({
                    url: "@Url.Action("DeleteTask", "Project")",
                    type: "POST",
                    data: {
                        taskId: taskId
                    },
                    success: function(response) {
                        if (response.success) {
                            // Modal kapat
                            $("#delete-task-modal").addClass("hidden");
                            $("body").css("overflow", "auto");
                            
                            // Görevi DOM'dan kaldır
                            $(`.task-card[data-task-id="${taskId}"]`).fadeOut(300, function() {
                                $(this).remove();
                                
                                // Sayaçları güncelle
                                updateTaskCounters();
                                // Tamamlanma yüzdesini güncelle
                                updateCompletionPercentage();
                                
                                // Başarı mesajı göster
                                showNotification("Görev başarıyla silindi", "success");
                            });
                        } else {
                            // Hata mesajı göster
                            $("#delete-task-modal").addClass("hidden");
                            $("body").css("overflow", "auto");
                            showNotification("Hata: " + response.message, "error");
                        }
                    },
                    error: function(xhr, status, error) {
                        $("#delete-task-modal").addClass("hidden");
                        $("body").css("overflow", "auto");
                        showNotification("Bağlantı hatası oluştu. Lütfen tekrar deneyin.", "error");
                    }
                });
            });
            
            // Görev düzenleme
            $(document).on("click", ".edit-task-btn", function() {
                console.log("Edit task button clicked");
                const taskId = $(this).data("task-id");
                console.log("Task ID:", taskId);
                
                // Görevi Ajax ile getir
                $.ajax({
                    url: "@Url.Action("GetTask", "Project")",
                    type: "GET",
                    data: { taskId: taskId },
                    success: function(task) {
                        if (task) {
                            console.log("Görev verisi alındı:", task);
                            
                            // Modal alanlarını doldur
                            $("#edit-task-id").val(task.id);
                            $("#edit-task-project-id").val(task.projectId);
                            $("#edit-task-status").val(task.status);
                            $("#edit-task-name").val(task.name);
                            $("#edit-task-description").val(task.description);
                            $("#edit-task-priority").val(task.priority);
                            
                            // Bitiş tarihi varsa formatla ve ata
                            if (task.dueDate) {
                                const dueDate = new Date(task.dueDate);
                                $("#edit-task-due-date").val(dueDate.toISOString().split('T')[0]);
                            } else {
                                $("#edit-task-due-date").val('');
                            }
                            
                            // Atanan üye seçimini güncelle
                            console.log("Atanan üye ID:", task.assignedMemberId);
                            
                            // Mevcut tüm takım üyelerini getir
                            const teamMembers = @Html.Raw(Json.Serialize(Model.TeamMembers));
                            console.log("Takım üyeleri:", teamMembers);
                            
                            // Select elementi ve tüm seçenekleri kontrol et
                            const selectElement = document.getElementById("edit-task-assigned-member");
                            console.log("Select element:", selectElement);
                            Array.from(selectElement.options).forEach(option => {
                                console.log(`Option: value=${option.value}, data-user-id=${option.getAttribute('data-user-id')}`);
                            });
                            
                            // Atanan üye ID'sini düzgün şekilde handle et
                            if (task.assignedMemberId && task.assignedMemberId !== "") {
                                console.log("Atanacak üye ID değeri:", task.assignedMemberId, "Tip:", typeof task.assignedMemberId);
                                
                                // Tüm seçenekleri kontrol et ve veri özniteliği eşleşeni bul
                                let optionFound = false;
                                
                                // Öncelikle tüm seçenek değerlerini string olarak karşılaştır
                                const assignedIdStr = String(task.assignedMemberId);
                                
                                // Forma üye ID değerini doğrudan atamayı dene
                                $("#edit-task-assigned-member").val(assignedIdStr);
                                
                                // Atama başarılı mı kontrol et
                                if ($("#edit-task-assigned-member").val() === assignedIdStr) {
                                    console.log(`Doğrudan atama başarılı: ${assignedIdStr}`);
                                    optionFound = true;
                                } else {
                                    console.log("Doğrudan atama başarısız, alternatif yöntemler deneniyor");
                                    
                                    // Her option için kontrol
                                    Array.from(selectElement.options).forEach(option => {
                                        const optionVal = String(option.value);
                                        const optionUserId = String(option.getAttribute('data-user-id') || "");
                                        
                                        console.log(`Karşılaştırma: 
                                            option.value (${typeof optionVal}) = ${optionVal} 
                                            vs 
                                            assignedIdStr (${typeof assignedIdStr}) = ${assignedIdStr}`);
                                            
                                        console.log(`Kullanıcı ID Karşılaştırma: 
                                            option.data-user-id (${typeof optionUserId}) = ${optionUserId} 
                                            vs 
                                            assignedIdStr (${typeof assignedIdStr}) = ${assignedIdStr}`);
                                        
                                        // Değer veya kullanıcı ID eşleşmesi
                                        if (optionVal === assignedIdStr || optionUserId === assignedIdStr) {
                                            option.selected = true;
                                            $("#edit-task-assigned-member").val(optionVal);
                                        optionFound = true;
                                            console.log(`Eşleşen seçenek bulundu: ${optionVal}`);
                                    }
                                    });
                                }
                                
                                if (!optionFound) {
                                    console.log("Eşleşen seçenek bulunamadı, boş değer atanıyor");
                                    $("#edit-task-assigned-member").val("");
                                        }
                                    } else {
                                // Atanmış üye yoksa boş seç
                                console.log("Atanmış üye bilgisi yok, boş değer atanıyor");
                                $("#edit-task-assigned-member").val("");
                            }
                            
                            // Modalı göster
                            $("#edit-task-modal").removeClass("hidden");
                            $("body").css("overflow", "hidden");
                        } else {
                            showNotification("Görev bilgileri alınamadı", "error");
                        }
                    },
                    error: function() {
                        showNotification("Bağlantı hatası oluştu", "error");
                    }
                });
            });
            
                // Görev düzenleme modalını kapatma
                $("#close-edit-task-modal, #cancel-edit-task").on("click", function() {
                    $("#edit-task-modal").addClass("hidden");
                    $("body").css("overflow", "");
                    $("#edit-task-form")[0].reset();
                });
                
                // Form submit olayını engelle ve sadece buton click olayını kullan
                $("#edit-task-form").on("submit", function(e) {
                    e.preventDefault(); // Form submiti engelle
                    return false;
                });
                
                // Görev düzenleme formunu gönder
                $("#edit-task-form").on("submit", function(e) {
                    e.preventDefault();
                    
                    const taskId = $("#edit-task-id").val();
                    const projectId = $("#edit-task-project-id").val();
                    const status = $("#edit-task-status").val();
                    const name = $("#edit-task-name").val();
                    const description = $("#edit-task-description").val();
                    const priority = $("#edit-task-priority").val();
                    const dueDate = $("#edit-task-due-date").val();
                    const assignedMemberId = $("#edit-task-assigned-member").val();
                    
                    if (!name || name.trim() === "") {
                        showNotification("Görev adı zorunludur", "error");
                        return false;
                    }
                    
                    // Görevi Ajax ile güncelle
                $.ajax({
                        url: "@Url.Action("UpdateTask", "Project")",
                    type: "POST",
                    data: {
                            Id: taskId,
                            ProjectId: projectId,
                            Status: status,
                            Name: name,
                            Description: description,
                            Priority: priority,
                            DueDate: dueDate,
                            AssignedMemberId: assignedMemberId
                    },
                    success: function(response) {
                        if (response.success) {
                                // Modalı kapat
                                $("#edit-task-modal").addClass("hidden");
                                $("body").css("overflow", "");
                                
                                // Kullanıcıya bilgi ver
                                showNotification("Görev başarıyla güncellendi", "success");
                                
                                // Sayfa yenileme yapmadan dinamik olarak görevi güncelle
                            const taskCard = $(`.task-card[data-task-id="${taskId}"]`);
                                const task = response.task;
                                
                                // Basit alanları güncelle
                                taskCard.find('h4').text(task.name);
                                
                                // Açıklama alanını güncelle
                                updateTaskDescription(taskCard, task.description);
                                
                                // Önceliği güncelle
                                const prioritySpan = taskCard.find('span.rounded-full').first();
                                const priorityClasses = {
                                    0: 'bg-blue-100 text-blue-800',
                                    1: 'bg-amber-100 text-amber-800',
                                    2: 'bg-orange-100 text-orange-800',
                                    3: 'bg-red-100 text-red-800'
                                };
                                const priorityTexts = {
                                    0: 'Düşük',
                                    1: 'Orta',
                                    2: 'Yüksek',
                                    3: 'Acil'
                                };
                                
                                prioritySpan.removeClass('bg-blue-100 text-blue-800 bg-amber-100 text-amber-800 bg-orange-100 text-orange-800 bg-red-100 text-red-800');
                                prioritySpan.addClass(priorityClasses[task.priority]);
                                prioritySpan.text(priorityTexts[task.priority]);
                                
                                // Görev atanmış kişiyi güncelle
                                // Bu kısmı daha karmaşık olduğu için şimdilik sayfayı yenileme şeklinde ele alalım
                                // Daha sonra iyileştirmek için bu bölüm geliştirilebilir
                                
                                // Formu sıfırla
                                $("#edit-task-form")[0].reset();
                            } else {
                                showNotification("Hata: " + response.message, "error");
                            }
                        },
                        error: function() {
                            showNotification("Bağlantı hatası oluştu", "error");
                        }
                    });
            });
            
            // Görev düzenleme modalı için düğme işleyicileri
            $("#edit-task-save-btn").on("click", function() {
                console.log("Save button clicked");
                
                // Form değerlerini al ve ekrana yazdır (debug için)
                const taskId = $("#edit-task-id").val();
                const projectId = $("#edit-task-project-id").val();
                const status = $("#edit-task-status").val();
                const name = $("#edit-task-name").val();
                const description = $("#edit-task-description").val();
                const priority = $("#edit-task-priority").val();
                const dueDate = $("#edit-task-due-date").val();
                const assignedMemberId = $("#edit-task-assigned-member").val();
                
                // Tüm form verilerini logla
                console.log("FORM VERİLERİ:", {
                    Id: taskId,
                    ProjectId: projectId,
                    Status: status,
                    Name: name,
                    Description: description,
                    Priority: priority,
                    DueDate: dueDate,
                    AssignedMemberId: assignedMemberId
                });
                
                if (!name || name.trim() === "") {
                    showNotification("Görev adı zorunludur", "error");
                    return false;
                }
                
                // Görevi Ajax ile güncelle - Form datayı manuel olarak gönderelim
                $.ajax({
                    url: "@Url.Action("UpdateTask", "Project")",
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify({
                        Id: parseInt(taskId),
                        ProjectId: parseInt(projectId),
                        Status: parseInt(status),
                        Name: name,
                        Description: description,
                        Priority: parseInt(priority),
                        DueDate: dueDate ? new Date(dueDate) : null,
                        AssignedMemberId: assignedMemberId
                    }),
                    success: function(response) {
                        console.log("Sunucu yanıtı:", response);
                            
                        if (response.success) {
                            // Modalı kapat
                            $("#edit-task-modal").addClass("hidden");
                            $("body").css("overflow", "");
                            
                            // Kullanıcıya bilgi ver
                            showNotification("Görev başarıyla güncellendi", "success");
                            
                            // Sayfayı yenile (assigned member gösterimi için)
                            window.location.reload();
                        } else {
                            showNotification("Görev güncellenirken bir hata oluştu: " + (response.message || "Bilinmeyen hata"), "error");
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error("Görev güncelleme hatası:", xhr.responseText);
                        showNotification("Bağlantı hatası oluştu. Lütfen tekrar deneyin.", "error");
                    }
            });
        });

        // Sayfadan ayrılırken bağlantıyı kapat
        $(window).on('beforeunload', function() {
            if (connection && connection.state === "Connected") {
                connection.invoke("LeaveProjectGroup", @Model.Project.Id);
                connection.stop();
            }
            });

            // Sayfa yüklendiğinde sayaçları güncelle
                            updateTaskCounters();
                            updateCompletionPercentage();
            
            // Sürükle-bırak işlevini etkinleştir
            const todoList = document.getElementById('todo-tasks');
            const inProgressList = document.getElementById('in-progress-tasks');
            const doneList = document.getElementById('done-tasks');
            
            // Todo listesi için Sortable başlat
            new Sortable(todoList, {
                group: 'tasks', // Gruplar arası taşıma için
                animation: 150,
                ghostClass: 'bg-blue-50',
                dragClass: 'opacity-75',
                chosenClass: 'shadow-lg',
                sort: true,
                invertSwap: true,
                onStart: function() {
                    $('.task-container').addClass('border-opacity-100');
                },
                onEnd: function(evt) {
                    $('.task-container').removeClass('border-opacity-100');
                    
                    if (evt.from !== evt.to) {
                        const taskId = evt.item.getAttribute('data-task-id');
                        let newStatus = 0; // Varsayılan Todo
                        
                        if (evt.to.id === 'in-progress-tasks') {
                            newStatus = 1; // In Progress
                        } else if (evt.to.id === 'done-tasks') {
                            newStatus = 2; // Done
                        }
                        
                        // Önce göreve zaten eklenmiş açıklama var mı kontrol et ve sadece birini bırak
                        const taskCard = $(evt.item);
                        const descriptionElements = taskCard.find('p.text-sm.text-gray-600.mb-2');
                        if (descriptionElements.length > 1) {
                            // İlk öğe hariç tüm açıklama elementlerini kaldır
                            descriptionElements.slice(1).remove();
                        }
                        
                        // AJAX ile görev durumunu güncelle
                        $.ajax({
                            url: "@Url.Action("UpdateTaskStatus", "Project")",
                            type: "POST",
                            data: {
                                taskId: taskId,
                                newStatus: newStatus
                            },
                            success: function(response) {
                                if (response.success) {
                                    // Başarılı olduğunda görevleri güncelle
                                    const taskCard = $(`.task-card[data-task-id="${taskId}"]`);
                                    updateTaskButtons(taskCard, newStatus);
                                    updateTaskCounters();
                                    updateCompletionPercentage();
                                } else {
                                    // Hata durumunda sayfayı yenile
                                    showNotification("Hata: " + response.message, "error");
                                    window.location.reload();
                                }
                            },
                            error: function() {
                                showNotification("Bağlantı hatası oluştu", "error");
                                window.location.reload();
                            }
                        });
                    }
                }
            });
            
            // In Progress listesi için Sortable başlat
            new Sortable(inProgressList, {
                group: 'tasks',
                animation: 150,
                ghostClass: 'bg-amber-50',
                dragClass: 'opacity-75',
                chosenClass: 'shadow-lg',
                sort: true,
                invertSwap: true,
                onStart: function() {
                    $('.task-container').addClass('border-opacity-100');
                },
                onEnd: function(evt) {
                    $('.task-container').removeClass('border-opacity-100');
                    
                    if (evt.from !== evt.to) {
                        const taskId = evt.item.getAttribute('data-task-id');
                        let newStatus = 1; // Varsayılan In Progress
                        
                        if (evt.to.id === 'todo-tasks') {
                            newStatus = 0; // Todo
                        } else if (evt.to.id === 'done-tasks') {
                            newStatus = 2; // Done
                        }
                        
                        // Önce göreve zaten eklenmiş açıklama var mı kontrol et ve sadece birini bırak
                        const taskCard = $(evt.item);
                        const descriptionElements = taskCard.find('p.text-sm.text-gray-600.mb-2');
                        if (descriptionElements.length > 1) {
                            // İlk öğe hariç tüm açıklama elementlerini kaldır
                            descriptionElements.slice(1).remove();
                        }
                        
                        // AJAX ile görev durumunu güncelle
                        $.ajax({
                            url: "@Url.Action("UpdateTaskStatus", "Project")",
                            type: "POST",
                            data: {
                                taskId: taskId,
                                newStatus: newStatus
                            },
                            success: function(response) {
                                if (response.success) {
                                    // Başarılı olduğunda görevleri güncelle
                                    const taskCard = $(`.task-card[data-task-id="${taskId}"]`);
                                    updateTaskButtons(taskCard, newStatus);
                                    updateTaskCounters();
                                    updateCompletionPercentage();
                                } else {
                                    // Hata durumunda sayfayı yenile
                                    showNotification("Hata: " + response.message, "error");
                                    window.location.reload();
                                }
                            },
                            error: function() {
                                showNotification("Bağlantı hatası oluştu", "error");
                                window.location.reload();
                            }
                        });
                    }
                }
            });
            
            // Done listesi için Sortable başlat
            new Sortable(doneList, {
                group: 'tasks',
                animation: 150,
                ghostClass: 'bg-green-50',
                dragClass: 'opacity-75',
                chosenClass: 'shadow-lg',
                sort: true,
                invertSwap: true,
                onStart: function() {
                    $('.task-container').addClass('border-opacity-100');
                },
                onEnd: function(evt) {
                    $('.task-container').removeClass('border-opacity-100');
                    
                    if (evt.from !== evt.to) {
                        const taskId = evt.item.getAttribute('data-task-id');
                        let newStatus = 2; // Varsayılan Done
                        
                        if (evt.to.id === 'todo-tasks') {
                            newStatus = 0; // Todo
                        } else if (evt.to.id === 'in-progress-tasks') {
                            newStatus = 1; // In Progress
                        }
                        
                        // Önce göreve zaten eklenmiş açıklama var mı kontrol et ve sadece birini bırak
                        const taskCard = $(evt.item);
                        const descriptionElements = taskCard.find('p.text-sm.text-gray-600.mb-2');
                        if (descriptionElements.length > 1) {
                            // İlk öğe hariç tüm açıklama elementlerini kaldır
                            descriptionElements.slice(1).remove();
                        }
                        
                        // AJAX ile görev durumunu güncelle
                        $.ajax({
                            url: "@Url.Action("UpdateTaskStatus", "Project")",
                            type: "POST",
                            data: {
                                taskId: taskId,
                                newStatus: newStatus
                            },
                            success: function(response) {
                                if (response.success) {
                                    // Başarılı olduğunda görevleri güncelle
                                    const taskCard = $(`.task-card[data-task-id="${taskId}"]`);
                                    updateTaskButtons(taskCard, newStatus);
                                    updateTaskCounters();
                                    updateCompletionPercentage();
                                } else {
                                    // Hata durumunda sayfayı yenile
                                    showNotification("Hata: " + response.message, "error");
                                    window.location.reload();
                                }
                            },
                            error: function() {
                                showNotification("Bağlantı hatası oluştu", "error");
                                window.location.reload();
                            }
                        });
                    }
                }
            });
        });
        
        // Görev butonlarını güncelleyen fonksiyon
        function updateTaskButtons(taskCard, newStatus) {
            // Task bilgilerini bul
            const taskId = taskCard.data('task-id');
            
            // Önce göreve zaten eklenmiş açıklama var mı kontrol et ve sadece birini bırak
            const descriptionElements = taskCard.find('p.text-sm.text-gray-600.mb-2');
            if (descriptionElements.length > 1) {
                // İlk öğe hariç tüm açıklama elementlerini kaldır
                descriptionElements.slice(1).remove();
            }
            
            // Mevcut tüm taşıma butonlarını bulup temizle
            let buttonsContainer = taskCard.find('.flex.justify-between.items-center.mt-2, .flex.justify-end.items-center.mt-2, .flex.items-center.justify-end.space-x-1, .flex.space-x-2.mt-2');
            
            if (buttonsContainer.length > 0) {
                buttonsContainer.remove();
            }
            
            // canModifyTasks değerini kontrol et (Razor kullanarak)
            @if (canModifyTasks) {
                <text>
                // Yeni butonlar ekleyelim
                let buttonsHtml = '';
                
                if (newStatus === 0) { // Todo - Yapılacaklar sütunu
                    buttonsHtml = `
                        <div class="flex items-center justify-end space-x-1">
                            <button class="move-task-btn bg-amber-100 text-amber-800 hover:bg-amber-200 text-xs px-2 py-1 rounded" data-task-id="${taskId}" data-status="1">
                                <i class="fas fa-arrow-right"></i> Devam Ediyor
                                </button>
                            </div>
                        `;
                } else if (newStatus === 1) { // In Progress - Devam Edenler sütunu
                    buttonsHtml = `
                        <div class="flex justify-between items-center mt-2">
                            <button class="move-task-btn bg-blue-100 text-blue-800 hover:bg-blue-200 text-xs px-2 py-1 rounded" data-task-id="${taskId}" data-status="0">
                                    <i class="fas fa-arrow-left"></i> Yapılacak
                                </button>
                            <button class="move-task-btn bg-green-100 text-green-800 hover:bg-green-200 text-xs px-2 py-1 rounded" data-task-id="${taskId}" data-status="2">
                                    <i class="fas fa-arrow-right"></i> Tamamlandı
                                </button>
                            </div>
                        `;
                } else if (newStatus === 2) { // Done - Tamamlananlar sütunu
                    buttonsHtml = `
                        <div class="flex justify-end items-center mt-2">
                            <button class="move-task-btn bg-amber-100 text-amber-800 hover:bg-amber-200 text-xs px-2 py-1 rounded" data-task-id="${taskId}" data-status="1">
                                <i class="fas fa-arrow-left"></i> Devam Ediyor
                                </button>
                            </div>
                        `;
                }
                
                // Butonları karta ekle
                taskCard.append(buttonsHtml);
                                </text>
                            }
            }
            
            // Açıklama alanını güncelleyen genel fonksiyon
            function updateTaskDescription(taskCard, description) {
                // Önce tüm mevcut açıklama elementlerini temizle
                const descriptionElements = taskCard.find('p.text-sm.text-gray-600.mb-2');
                descriptionElements.remove();
                
                // Eğer açıklama varsa yeni bir tane ekle
                if (description) {
                    taskCard.find('div.flex.justify-between.items-start').after(
                        `<p class="text-sm text-gray-600 mb-2 break-words whitespace-normal" style="word-wrap: break-word; max-width: 100%; overflow-wrap: break-word;">${description}</p>`
                    );
                }
            }
            
            // Görev sayaçlarını güncelleme fonksiyonu
            function updateTaskCounters() {
                // Her bir durum için görev sayısını güncelle
                const todoCount = $('#todo-tasks .task-card').length;
                const inProgressCount = $('#in-progress-tasks .task-card').length;
                const doneCount = $('#done-tasks .task-card').length;
                
                // Sayaçları güncelle
            $('.todo-count-badge').text(todoCount);
            $('.in-progress-count-badge').text(inProgressCount);
            $('.done-count-badge').text(doneCount);
            
            console.log("Görev sayıları güncellendi:", { todo: todoCount, inProgress: inProgressCount, done: doneCount });
            }
            
            // Tamamlanma yüzdesini güncelleme fonksiyonu
            function updateCompletionPercentage() {
                // Görev sayılarını al
                const todoCount = $('#todo-tasks .task-card').length;
                const inProgressCount = $('#in-progress-tasks .task-card').length;
                const doneCount = $('#done-tasks .task-card').length;
                
                // Toplam görev sayısı
                const totalTasks = todoCount + inProgressCount + doneCount;
                
                // Eğer hiç görev yoksa, yüzde 0 olarak ayarla
                if (totalTasks === 0) {
                $('.completion-bar').css('width', '0%');
                $('.completion-percentage').text('%0');
                    return;
                }
                
                // Tamamlanma yüzdesini hesapla (sadece Done durumundaki görevler tamamlanmış sayılır)
                const completionPercentage = Math.round((doneCount / totalTasks) * 100);
                
                // İlerleme çubuğunu güncelle
            $('.completion-bar').css('width', completionPercentage + '%');
            $('.completion-percentage').text('%' + completionPercentage);
            }
            
            // Bildirim gösterme fonksiyonu
            function showNotification(message, type) {
            // Mevcut bildirimleri kaldır
            $('.notification-toast').remove();
            
            // Yeni bildirim oluştur
            const notificationDiv = $('<div>')
                .addClass('notification-toast fixed bottom-4 right-4 px-6 py-3 rounded-lg shadow-lg z-50')
                .css({
                    'transition': 'all 0.5s ease',
                    'opacity': '0',
                    'transform': 'translateY(20px)'
                });
            
            // Tür'e göre stilini belirle
                if (type === 'success') {
                    notificationDiv.addClass('bg-green-500 text-white');
            } else if (type === 'error') {
                    notificationDiv.addClass('bg-red-500 text-white');
            } else if (type === 'warning') {
                notificationDiv.addClass('bg-yellow-500 text-white');
            } else {
                notificationDiv.addClass('bg-blue-500 text-white');
                }
                
            // Mesajı ekle
            notificationDiv.text(message);
            
            // Body'e ekle
                $('body').append(notificationDiv);
                
            // Animasyonla göster
                setTimeout(() => {
                notificationDiv.css({
                    'opacity': '1',
                    'transform': 'translateY(0)'
                });
                }, 10);
                
                // 3 saniye sonra kaldır
                setTimeout(() => {
                notificationDiv.css({
                    'opacity': '0',
                    'transform': 'translateY(20px)'
                });
                    setTimeout(() => {
                        notificationDiv.remove();
                    }, 500);
                }, 3000);
            }
            
        // Projeden ayrılma butonu ve modal işlemleri
        $("#leave-project-btn").on("click", function() {
            console.log("Leave project button clicked");
                            // Modalı göster
            $("#leave-project-modal").removeClass("hidden");
            // Modalın animasyon sınıflarını ekle
            setTimeout(() => {
                $("#leave-modal-content").removeClass("scale-95 opacity-0");
                $("#leave-modal-content").addClass("scale-100 opacity-100");
            }, 10);
            $("body").css("overflow", "hidden"); // Arka planı kaydırmayı engelle
        });

        // Projeden ayrılma modalı kapatma
        $("#close-leave-modal, #cancel-leave").on("click", function() {
            console.log("Close leave modal");
            // Modalın animasyon sınıflarını kaldır
            $("#leave-modal-content").removeClass("scale-100 opacity-100");
            $("#leave-modal-content").addClass("scale-95 opacity-0");
            
            // Animasyon bittikten sonra modalı gizle
            setTimeout(() => {
                $("#leave-project-modal").addClass("hidden");
                $("body").css("overflow", ""); // Kaydırmayı tekrar etkinleştir
            }, 300);
        });

        // Projeden ayrılma işlemi
        $("#confirm-leave").on("click", function() {
            console.log("Confirm leave project");
            
            // AJAX ile projeden ayrıl
                    $.ajax({
                url: "@Url.Action("LeaveProject", "Team")",
                        type: "POST",
                headers: {
                    "X-Requested-With": "XMLHttpRequest"
                },
                        data: {
                    projectId: @Model.Project.Id,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function(response) {
                    console.log("Project leave response:", response);
                    
                            if (response.success) {
                        showNotification("Projeden başarıyla ayrıldınız", "success");
                        
                        // Kısa bir süre sonra Dashboard'a yönlendir
                        setTimeout(function() {
                            window.location.href = "@Url.Action("Index", "Dashboard")";
                        }, 1000);
                        } else {
                        // Modalı kapat
                        $("#leave-modal-content").removeClass("scale-100 opacity-100");
                        $("#leave-modal-content").addClass("scale-95 opacity-0");
                        
                        setTimeout(() => {
                            $("#leave-project-modal").addClass("hidden");
                            $("body").css("overflow", "");
                        }, 300);
                        
                        // Hata mesajı göster
                        showNotification("Projeden ayrılırken bir hata oluştu: " + response.message, "error");
                    }
                },
                error: function(xhr, status, error) {
                    console.error("Project leave error:", error);
                    console.error("Response:", xhr.responseText);
                    
                            // Modalı kapat
                    $("#leave-modal-content").removeClass("scale-100 opacity-100");
                    $("#leave-modal-content").addClass("scale-95 opacity-0");
                    
                    setTimeout(() => {
                        $("#leave-project-modal").addClass("hidden");
                            $("body").css("overflow", "");
                    }, 300);
                    
                    // Hata mesajı göster
                    showNotification("Projeden ayrılırken bir hata oluştu: " + error, "error");
                }
            });
        });
    </script>
} 