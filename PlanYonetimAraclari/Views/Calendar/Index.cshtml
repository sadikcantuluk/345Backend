@{
    ViewData["Title"] = "Takvim - Plan345";
}

<div class="container mx-auto px-4 py-8">
    <div class="bg-white rounded-lg shadow-lg p-6">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-2xl font-bold text-gray-800">Takvim</h1>
            <button id="addNoteBtn" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center">
                <i class="fas fa-plus mr-2"></i>
                Not Ekle
            </button>
        </div>
        
        <div id="calendar"></div>
    </div>
</div>

<!-- Not Ekleme/Düzenleme Modal -->
<div id="noteModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <h3 class="text-lg font-medium text-gray-900 mb-4" id="modalTitle">Not Ekle</h3>
            <form id="noteForm">
                <input type="hidden" id="noteId">
                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="noteTitle">
                        Başlık
                    </label>
                    <input type="text" id="noteTitle" name="title" required maxlength="200"
                           class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="noteDescription">
                        Açıklama
                    </label>
                    <textarea id="noteDescription" name="description" rows="3" maxlength="500"
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"></textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="noteDate">
                        Tarih
                    </label>
                    <input type="datetime-local" id="noteDate" name="date" required
                           class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                </div>
                <div class="flex items-center justify-between mt-6">
                    <div class="flex items-center" id="completedContainer">
                        <input type="checkbox" id="isCompleted" class="mr-2">
                        <label for="isCompleted" class="text-sm text-gray-700">Tamamlandı</label>
                    </div>
                    <div>
                        <button type="button" id="closeModal"
                                class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline mr-2">
                            İptal
                        </button>
                        <button type="submit"
                                class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                            Kaydet
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <link href='https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.css' rel='stylesheet' />
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.js'></script>
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/locales-all.js'></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            let calendar;
            let currentNoteId = null;
            const API_BASE_URL = '/api/calendar';

            // Takvimi başlat
            initializeCalendar();
            
            // Not bildirimlerini kontrol et
            checkNotifications();
            
            // Modal kontrolleri
            const modal = document.getElementById('noteModal');
            const addNoteBtn = document.getElementById('addNoteBtn');
            const closeModal = document.getElementById('closeModal');
            const noteForm = document.getElementById('noteForm');
            
            addNoteBtn.addEventListener('click', () => {
                openModal();
            });
            
            closeModal.addEventListener('click', () => {
                modal.classList.add('hidden');
            });
            
            noteForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                await saveNote();
            });

            function initializeCalendar() {
                const calendarEl = document.getElementById('calendar');
                calendar = new FullCalendar.Calendar(calendarEl, {
                    initialView: 'dayGridMonth',
                    locale: 'tr',
                    buttonText: {
                        today: 'Bugün'
                    },
                    headerToolbar: {
                        left: 'prev,next today',
                        center: 'title',
                        right: 'dayGridMonth,timeGridWeek,timeGridDay'
                    },
                    events: async function(info, successCallback, failureCallback) {
                        try {
                            const startStr = info.startStr;
                            const endStr = info.endStr;
                            
                            console.log('Tarih aralığı:', { start: startStr, end: endStr });
                            
                            const response = await fetch(`${API_BASE_URL}/notes?start=${encodeURIComponent(startStr)}&end=${encodeURIComponent(endStr)}`);
                            if (!response.ok) {
                                const result = await response.json();
                                throw new Error(result.error || 'Notlar alınırken bir hata oluştu');
                            }
                            
                            const result = await response.json();
                            if (!result.success) {
                                throw new Error(result.error || 'Notlar alınamadı');
                            }

                            const events = result.data.map(note => ({
                                id: note.id,
                                title: note.title,
                                start: note.start,
                                description: note.description,
                                backgroundColor: note.isCompleted ? '#10B981' : '#3B82F6',
                                borderColor: note.isCompleted ? '#059669' : '#2563EB'
                            }));
                            
                            successCallback(events);
                        } catch (error) {
                            console.error('Error fetching events:', error);
                            showNotification(error.message, 'error');
                            failureCallback(error);
                        }
                    },
                    eventClick: function(info) {
                        openModal(info.event);
                    },
                    dateClick: function(info) {
                        openModal(null, info.date);
                    }
                });
                
                calendar.render();
            }

            async function saveNote() {
                try {
                    const title = document.getElementById('noteTitle').value.trim();
                    const description = document.getElementById('noteDescription').value.trim();
                    const date = document.getElementById('noteDate').value;
                    const isCompleted = document.getElementById('isCompleted').checked;
                    
                    if (!title || !date) {
                        showNotification('Başlık ve tarih alanları zorunludur', 'error');
                        return;
                    }

                    const noteDate = new Date(date);
                    if (isNaN(noteDate.getTime())) {
                        showNotification('Geçerli bir tarih giriniz', 'error');
                        return;
                    }
                    
                    const noteData = {
                        title: title,
                        description: description || '',
                        noteDate: noteDate.toISOString(),
                        isCompleted: isCompleted
                    };

                    console.log('Gönderilen veri:', noteData);

                    const url = currentNoteId ? 
                        `${API_BASE_URL}/notes/${currentNoteId}` : 
                        `${API_BASE_URL}/notes`;
                    
                    const method = currentNoteId ? 'PUT' : 'POST';
                    
                    const response = await fetch(url, {
                        method: method,
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify(noteData)
                    });

                    const result = await response.json();

                    if (!response.ok) {
                        const errorMessage = result.error || 'Bir hata oluştu';
                        const errorDetails = result.details ? 
                            (Array.isArray(result.details) ? result.details.join(', ') : result.details) 
                            : '';
                        throw new Error(errorDetails || errorMessage);
                    }

                    if (result.success) {
                        modal.classList.add('hidden');
                        calendar.refetchEvents();
                        showNotification(currentNoteId ? 'Not güncellendi' : 'Not eklendi', 'success');
                        resetForm();
                    } else {
                        throw new Error(result.error || 'İşlem başarısız oldu');
                    }
                } catch (error) {
                    console.error('Error saving note:', error);
                    showNotification(error.message, 'error');
                }
            }

            async function deleteNote() {
                if (!currentNoteId) return;
                
                if (confirm('Bu notu silmek istediğinizden emin misiniz?')) {
                    try {
                        const response = await fetch(`${API_BASE_URL}/notes/${currentNoteId}`, {
                            method: 'DELETE',
                            headers: {
                                'Accept': 'application/json'
                            }
                        });

                        const result = await response.json();

                        if (!response.ok) {
                            throw new Error(result.error || 'Bir hata oluştu');
                        }

                        if (result.success) {
                            modal.classList.add('hidden');
                            calendar.refetchEvents();
                            showNotification('Not silindi', 'success');
                            resetForm();
                        } else {
                            throw new Error(result.error || 'Not silinemedi');
                        }
                    } catch (error) {
                        console.error('Error deleting note:', error);
                        showNotification(error.message, 'error');
                    }
                }
            }

            function resetForm() {
                currentNoteId = null;
                noteForm.reset();
                const deleteBtn = document.getElementById('deleteNoteBtn');
                if (deleteBtn) {
                    deleteBtn.remove();
                }
            }

            function openModal(event = null, defaultDate = null) {
                const modalTitle = document.getElementById('modalTitle');
                const noteTitle = document.getElementById('noteTitle');
                const noteDescription = document.getElementById('noteDescription');
                const noteDate = document.getElementById('noteDate');
                const isCompleted = document.getElementById('isCompleted');
                const completedContainer = document.getElementById('completedContainer');

                resetForm();

                if (event) {
                    modalTitle.textContent = 'Notu Düzenle';
                    currentNoteId = event.id;
                    noteTitle.value = event.title;
                    noteDescription.value = event.extendedProps.description || '';
                    noteDate.value = formatDateTimeLocal(event.start);
                    
                    // Tamamlandı durumunu kontrol et
                    const isCompletedStatus = event.backgroundColor === '#10B981';
                    isCompleted.checked = isCompletedStatus;
                    completedContainer.classList.remove('hidden');
                    
                    console.log('Not düzenleme:', {
                        id: event.id,
                        title: event.title,
                        description: event.extendedProps.description,
                        start: event.start,
                        isCompleted: isCompletedStatus
                    });
                    
                    // Silme butonu ekle
                    if (!document.getElementById('deleteNoteBtn')) {
                        const deleteBtn = document.createElement('button');
                        deleteBtn.id = 'deleteNoteBtn';
                        deleteBtn.type = 'button';
                        deleteBtn.className = 'bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline mr-2';
                        deleteBtn.textContent = 'Sil';
                        deleteBtn.onclick = deleteNote;
                        document.querySelector('#noteForm button[type="submit"]').parentNode.prepend(deleteBtn);
                    }
                } else {
                    modalTitle.textContent = 'Not Ekle';
                    if (defaultDate) {
                        noteDate.value = formatDateTimeLocal(defaultDate);
                    }
                    completedContainer.classList.add('hidden');
                }

                modal.classList.remove('hidden');
            }

            function formatDateTimeLocal(date) {
                const d = new Date(date);
                d.setMinutes(d.getMinutes() - d.getTimezoneOffset());
                return d.toISOString().slice(0, 16);
            }

            function showNotification(message, type) {
                const notificationDiv = document.createElement('div');
                notificationDiv.className = `fixed bottom-4 right-4 px-6 py-3 rounded-lg text-white ${
                    type === 'success' ? 'bg-green-500' : 'bg-red-500'
                }`;
                notificationDiv.textContent = message;
                document.body.appendChild(notificationDiv);
                
                setTimeout(() => {
                    notificationDiv.remove();
                }, 3000);
            }

            async function checkNotifications() {
                try {
                    const response = await fetch(`${API_BASE_URL}/notifications`);
                    const result = await response.json();
                    
                    if (!response.ok) {
                        throw new Error(result.error || 'Bildirimler kontrol edilirken bir hata oluştu');
                    }

                    if (result.success && result.data) {
                        result.data.forEach(note => {
                            showNotification(`Bugün için notunuz var: ${note.title}`, 'success');
                        });
                    }
                } catch (error) {
                    console.error('Error checking notifications:', error);
                    showNotification(error.message, 'error');
                }
                
                // Her 5 dakikada bir kontrol et
                setTimeout(checkNotifications, 5 * 60 * 1000);
            }
        });
    </script>
} 